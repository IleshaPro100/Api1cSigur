#Область ПрограммныйИнтерфейс

// Процедура ВыгрузкаСобытийИзСигура(Ссылка, ПараметрыСеанса) Экспорт
//
//  Назначение:
//      Выгружает события из Sigur API за указанный период и сохраняет их в базе данных 1С.
//
//  Параметры:
//      Ссылка - СправочникСсылка.ВнешниеОбработки - Ссылка на элемент справочника "ВнешниеОбработки",
//               определяющий параметры подключения к Sigur.  Внешняя обработка должна содержать
//               необходимые реквизиты для хранения параметров подключения (URL сервиса, токен и т.д.).
//      ПараметрыСеанса - Структура - Структура, содержащая параметры сеанса, такие как период
//                        выгрузки событий.  Содержит поля:
//                        * "Начало" - Дата - Дата начала периода выгрузки событий.
//                        * "Конец" - Дата - Дата окончания периода выгрузки событий.
Процедура ВыгрузкаСобытийИзСигура(Ссылка,ПараметрыСеанса) Экспорт

	Параметры = ПараметрыСигура(Ссылка);
	ПараметрыСоедениения = ОпределитьНеобходимостьПолученияТокена (Параметры);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("startTime",ПараметрыСеанса.Начало);
	ПараметрыЗапроса.Вставить("endTime",ПараметрыСеанса.Конец);
	
	СинхронизироватьСобытияSigur(ПараметрыСоедениения,ПараметрыЗапроса);


КонецПроцедуры

Процедура ВыгрузкаДанныхВСигур (Ссылка)  Экспорт
	
	// Если нет данных для выгрузки, работа процедуры сразу же прекращается.
	// Если данные для выгрузки есть, то далее по тексту будет повторен вызов функции ПолучитьДанныеДляВыгрузкиВСКУД().
	// Это сделано специально, т.к. процедура получения соединения с сервером СКУД и загрузка должностей может занять некоторое время,
	// в течение которого могут быть зарегистрированы новые данные для выгрузки.
	
	ДанынеДляВыгрузкиВСигур = ПолучитьДанныеДляВыгрузкиВСКУД()
	Если ДанынеДляВыгрузкиВСигур.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Параметры = ПараметрыСигура(Ссылка);
	ПараметрыСоедениения = ОпределитьНеобходимостьПолученияТокена (Параметры);
	
	Если ПараметрыСоедениения.Токен = "" ИЛИ  ПараметрыСоедениения.РефрешТокен = "" Тогда
		Возврат;	
	КонецЕсли;
	
	
	
КонецПроцедуры


Процедура НастройкиСУБДПередРаботой(Ссылка) Экспорт
	
	ИзменитьВсеЗаписиВНТ_ИсторияВыгрузокВСКУД();
	ИзменитьВсеЗаписиВНТ_ВходыВыходыФизЛицСКУД();
	
	СоздатьДополнительныеРеквизиты();
	
	Параметры = ПараметрыСигура(Ссылка);
	
	ПараметрыСоедениения = ОпределитьНеобходимостьПолученияТокена (Параметры);
	
	УдалитьПодразделенияSigur(ПараметрыСоедениения,Новый Массив);
	
	СоздатьПодразделениеВSigur(ПараметрыСоедениения);
	
	ПараметрыСоедениения = ОпределитьНеобходимостьПолученияТокена (ПараметрыСоедениения);
	
	СопоставлениеДолжностейSigur(ПараметрыСоедениения);
	
	ПараметрыСоедениения = ОпределитьНеобходимостьПолученияТокена (ПараметрыСоедениения);
	
	СопоставлениеСотрудниковSigur(ПараметрыСоедениения);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
Функция ИзменитьТекущийНомерСообщения(НомерСообщения)
	
	МенеджерЗаписи = РегистрыСведений.НТ_НастройкиДляВыгрузкиВСКУД.СоздатьМенеджерЗаписи();	
	МенеджерЗаписи.Прочитать();
	
	ЗаписьВыполнена = Истина;
	
	Если МенеджерЗаписи.ТекущийНомерСообщения <> НомерСообщения Тогда
		
		МенеджерЗаписи.ТекущийНомерСообщения = НомерСообщения;
		Попытка 
			МенеджерЗаписи.Записать(Истина);
		Исключение
			ЗаписьВыполнена = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЗаписьВыполнена;
	
КонецФункции

// Функция ПолучитьСписокДепартаментов(ПараметрыПодключения, ПараметрыЗапроса) Экспорт
//
//  Назначение:
//      Получает список департаментов из Sigur API с возможностью фильтрации, сортировки и выбора полей.
//
//  Параметры:
//      ПараметрыПодключения - Структура - Параметры подключения к Sigur API.
//                           * "Токен"     - Строка - JWT (JSON Web Token) для аутентификации.
//                           * "URLСервиса" - Строка - URL адрес сервиса Sigur API (без пути /api/v1/departments).
//                           * "Порт"      - Число - Номер порта для подключения к сервису.
//      ПараметрыЗапроса - Структура - Параметры запроса к API для фильтрации и настройки выдачи.
//                           Может содержать следующие поля (необязательные):
//                           * "id"            - Строка - Идентификаторы департаментов (пример: "1,2" или "1&id=2").
//                           * "parentId"      - Число  - Идентификатор родительского департамента. 0 для корневых.
//                           * "name"          - Строка - Фильтр по имени департамента (совпадение).
//                           * "limit"         - Число  - Максимальное количество возвращаемых департаментов (0-3000).
//                           * "offset"        - Число  - Количество пропускаемых департаментов с начала.
//                           * "<custom field>" - Различный - Значение пользовательского поля (пример: "externalId=135").
//                           * "includeFields" - Строка - Список полей для включения в ответ (пример: "name,parentId").
//                           * "excludeFields" - Строка - Список полей для исключения из ответа (пример: "name").
//                           * "sortBy"        - Строка - Поле для сортировки (пример: "name").
//                           * "sortOrder"     - Строка - Порядок сортировки ("ASC" или "DESC").
//
//  Возвращаемое значение:
//      Массив - Массив структур, представляющих департаменты, полученный из JSON ответа API.
//               Каждая структура содержит поля: "id", "parentId", "name", "hasChildren",
//               "description" и пользовательские поля (если они есть).
//               Возвращает Неопределено в случае ошибки.
Функция ПолучитьСписокДепартаментов(Параметры) Экспорт
	
	JWTТокен = Параметры.Токен;
	URLСервиса = Параметры.URLСервиса;
	Порт = Параметры.порт;
	
	URL = "/api/v1/departments"; // Базовый URL
	
	HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт); // 
	
	Запрос = Новый HTTPЗапрос(URL);
	
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен); // Добавляем заголовок авторизации
	Запрос.Заголовки.Вставить("Content-Type", "application/json"); // Обязательно, если работаете с JSON
	
	Попытка
		Ответ = HTTPСоединение.Получить(Запрос);
	Исключение
		Сообщить("Ошибка при выполнении запроса: " + ОписаниеОшибки());
		Возврат Неопределено; // Или другое значение по умолчанию
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		Результат = ПростоеЧтениеJSON(ТелоОтвета);
		Возврат Результат;
		
	Иначе
		Сообщить("Ошибка HTTP: Код состояния = " + Ответ.КодСостояния);
		Сообщить("Описание ошибки: " + Ответ.ПолучитьТелоКакСтроку());
		
		Если Ответ.КодСостояния = 400 Тогда
			Сообщить("Неверный запрос (Bad Request)");
		ИначеЕсли Ответ.КодСостояния = 401 Тогда
			Сообщить("Не авторизован (Unauthorized) - проверьте JWTТокен");
		ИначеЕсли Ответ.КодСостояния = 403 Тогда
			Сообщить("Доступ запрещен (Access Denied)");
		КонецЕсли;
		
		Возврат Неопределено; 
	КонецЕсли;
	
КонецФункции

// Функция ОпределитьНеобходимостьПолученияТокена(Параметры) Экспорт
//
//  Назначение:
//      Определяет, необходимо ли получить новый JWT (JSON Web Token) авторизации для доступа к Sigur API.
//      Оценивает актуальность текущего токена и, при необходимости, выполняет обновление.
//
//  Параметры:
//      Параметры - Структура - Структура с параметрами подключения и текущими данными
//                  авторизации. Содержит следующие поля:
//                  * "Токен"                       - Строка - Текущий JWT (access token).
//                  * "РефрешТокен"                - Строка - Refresh token для обновления access token'а.
//                  * "ДатаОкончанияДействияТокена"  - Дата - Дата и время окончания срока действия текущего токена.
//                  * "ДатаОкончанияДействияРефрешТокена" - Дата - Дата и время окончания срока действия refresh token'а.
//                  * "URLСервиса"                  - Строка - URL адрес сервиса Sigur API (без пути).
//                  * "Порт"                         - Число - Номер порта для подключения к сервису.
//                  * ... (другие параметры, используемые для получения токена)
//
Функция ОпределитьНеобходимостьПолученияТокена(Параметры) Экспорт
	
	
	Если  Параметры.Токен = "" ИЛИ  Параметры.РефрешТокен = "" Тогда
		Результат = ПолучитьТокенАвторизацииSigur(Параметры);
		Возврат Результат; // Нет токена или refresh токена, нужно получать новый
	ИначеЕсли Параметры.ДатаОкончанияДействияТокена = Неопределено Тогда
		Результат = ПолучитьТокенАвторизацииSigur(Параметры);
		Возврат Результат;
	КонецЕсли;
	
	
	ТекущаяДата = ТекущаяДатаСеанса();
	РазницаВСекундах = Параметры.ДатаОкончанияДействияТокена- ТекущаяДата;
	ПорогОбновления = 1200;
	
	Если РазницаВСекундах <= ПорогОбновления Тогда
		РазницаВСекундахРефреш = Параметры.ДатаОкончанияДействияРефрешТокена - ТекущаяДата;
		Если РазницаВСекундахРефреш <= 0 Тогда
			Результат = ПолучитьТокенАвторизацииSigur(Параметры); 
			Возврат Результат;
		Иначе
			Результат = ОбновитьJWTТокен(Параметры);
			Возврат Результат; 
		КонецЕсли;
	Иначе
		Возврат Параметры; 
	КонецЕсли;
КонецФункции	

// Функция ПолучитьТокенАвторизацииSigur(Параметры) Экспорт
//
//  Назначение:
//      Получает JWT (JSON Web Token) авторизации из Sigur API, используя имя пользователя и пароль.
//
//  Параметры:
//      Параметры - Структура - Структура с параметрами подключения и аутентификации.
//                  Содержит следующие поля:
//                  * "Логин"      - Строка - Имя пользователя для доступа к Sigur API.
//                  * "Пароль"     - Строка - Пароль пользователя для доступа к Sigur API.
//                  * "URLСервиса" - Строка - URL адрес сервиса Sigur API (без пути /api/v1/users/auth).
//                  * "Порт"      - Число - Номер порта для подключения к сервису.
//
//  Возвращаемое значение:
//      Структура - Возвращает структуру "Параметры" с обновленными данными авторизации, включая:
//                  * "Токен"                       - Строка - JWT (access token), полученный из API.
//                  * "ДатаОкончанияДействияТокена"  - Дата - Дата и время окончания срока действия access token'а.
//                  * "РефрешТокен"                - Строка - Refresh token для обновления access token'а.
//                  * "ДатаОкончанияДействияРефрешТокена" - Дата - Дата и время окончания срока действия refresh token'а.
//                  В случае ошибки возвращает исходную структуру "Параметры" без изменений.
//
Функция ПолучитьТокенАвторизацииSigur(Параметры) Экспорт
	
	ИмяПользователя = Параметры.Логин;
	Пароль = Параметры.Пароль;
	URLСервиса = Параметры.URLСервиса;
	Порт = Параметры.порт;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса,Порт); 
		HTTPЗапрос = Новый HTTPЗапрос("/api/v1/users/auth");  // URL из документации SIGUR
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
		
		ЗапросJSON = Новый Структура;
		ЗапросJSON.Вставить("username", ИмяПользователя);
		ЗапросJSON.Вставить("password", Пароль);
		
		ТелоЗапроса = ПростаяЗаписьJSON(ЗапросJSON);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			ОтветJSON = ПростоеЧтениеJSON(HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8"));
			Параметры.Токен = ОтветJSON.token; 
			Параметры.ДатаОкончанияДействияТокена = ПеробразованиеДаты(ОтветJSON.expiresAt);  
			Параметры.ДатаОкончанияДействияРефрешТокена = ПеробразованиеДаты(ОтветJSON.refreshExpiresAt); 
			Параметры.РефрешТокен = ОтветJSON.refreshToken;  
			ЗаписатьТокены(Параметры);
		Иначе
			// Ошибка
			ТекстОшибки = "Ошибка получения токена: " + HTTPОтвет.КодСостояния + " - " + HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
			//ЗаписьЖурналаРегистрации("ПолучитьТокенАвторизацииSigur", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			Сообщить(ТекстОшибки); // Для отладки, в production лучше убрать
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		//ЗаписьЖурналаРегистрации("ПолучитьТокенАвторизацииSigur", УровеньЖурналаРегистрации.Ошибка, , , "Ошибка при выполнении HTTP-запроса: " + ОписаниеОшибки);
		Сообщить("Ошибка при выполнении HTTP-запроса: " + ОписаниеОшибки); // Для отладки, в production лучше убрать
	КонецПопытки;
	Возврат Параметры;
	
КонецФункции

// Функция ОбновитьJWTТокен(Параметры) Экспорт
//
//  Назначение:
//      Обновляет JWT (JSON Web Token) авторизации, используя refresh token.
//
//  Параметры:
//      Параметры - Структура - Структура с параметрами подключения и текущими данными
//                  авторизации. Содержит следующие поля:
//                  * "Токен"                       - Строка - Текущий JWT (access token).
//                  * "РефрешТокен"                - Строка - Refresh token для обновления access token'а.
//                  * "ДатаОкончанияДействияТокена"  - Дата - Дата и время окончания срока действия access token'а.
//                  * "ДатаОкончанияДействияРефрешТокена" - Дата - Дата и время окончания срока действия refresh token'а.
//                  * "URLСервиса"                  - Строка - URL адрес сервиса Sigur API (без пути).
//                  * "Порт"                         - Число - Номер порта для подключения к сервису.
//
//  Возвращаемое значение:
//      Структура - Возвращает структуру "Параметры" с обновленными данными авторизации, включая:
//                  * "Токен"                       - Строка - Обновленный JWT (access token).
//                  * "ДатаОкончанияДействияТокена"  - Дата - Обновленная дата и время окончания срока действия access token'а.
//                  * "РефрешТокен"                - Строка - Refresh token (возможно, обновленный, если API это позволяет).
//                  * "ДатаОкончанияДействияРефрешТокена" - Дата - Обновленная дата и время окончания срока действия refresh token'а.
//                  В случае ошибки возвращает исходную структуру "Параметры" без изменений.
//
Функция ОбновитьJWTТокен(Параметры) Экспорт
	JWTТокен = Параметры.Токен;
	URLСервиса = Параметры.URLСервиса;
	URI = "/api/v1/jwt/refresh";
	Порт = Параметры.Порт;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса,Порт);
		Запрос = Новый HTTPЗапрос(URI);
		Запрос.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		Запрос.Заголовки.Вставить("Content-Type", "application/json");  // Важно, если требуется передача данных в теле
		Запрос.УстановитьТелоИзСтроки(Параметры.РефрешТокен, КодировкаТекста.UTF8);
		Ответ = HTTPСоединение.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
			ОтветJSON =ПростоеЧтениеJSON(ТелоОтвета);
			Параметры.Токен = ОтветJSON.token; // Имя поля с токеном из документации SIGUR
			Параметры.ДатаОкончанияДействияТокена = ОтветJSON.expiresA;  // Может потребоваться преобразование типа
			Параметры.ДатаОкончанияДействияРефрешТокена = ОтветJSON.refreshExpiresAt; // Может потребоваться преобразование типа
			Параметры.РефрешТокен = ОтветJSON.refreshToken;  
			ЗаписатьТокены(Параметры);

			Сообщить("Токен успешно обновлен!");
			Сообщить("Новый токен: " + Параметры.Токен);
			Возврат Параметры;
		Иначе
			Сообщить("Ошибка обновления токена. Код состояния: " + Ответ.КодСостояния);
			Сообщить("Текст ошибки: " + Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
			Возврат Параметры;
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		//ЗаписьЖурналаРегистрации("ПолучитьТокенАвторизацииSigur", УровеньЖурналаРегистрации.Ошибка, , , "Ошибка при выполнении HTTP-запроса: " + ОписаниеОшибки);
		Сообщить("Ошибка при выполнении HTTP-запроса: " + ОписаниеОшибки); // Для отладки, в production лучше убрать
	КонецПопытки;
КонецФункции

// Функция ОбновитьДепартаментSigur(Параметры, IDДепартамента, ДанныеДляОбновления) Экспорт
//
//  Назначение:
//      Обновляет информацию о департаменте в Sigur API.
//
//  Параметры:
//      Параметры - Структура - Параметры подключения к Sigur API (URLСервиса, Порт, Токен).
//      IDДепартамента - Число - Идентификатор департамента, который нужно обновить.
//      ДанныеДляОбновления - Структура - Структура, содержащая поля и значения, которые нужно обновить.
//                             Возможные поля:
//                                 * "parentId" - Число - Идентификатор родительского департамента.
//                                 * "name" - Строка - Название департамента.
//                                 * "description" - Строка - Описание департамента.
//                                 * "<custom field>" - Произвольный тип - Значение пользовательского поля.
//
//  Возвращаемое значение:
//      Результат - Структура:
//          *   Успех           - Булево - Истина, если операция выполнена успешно, иначе Ложь.
//          *   КодСтатуса      - Число - Код состояния HTTP ответа.
//          *   ТелоОтвета      - Строка - Тело HTTP ответа.
//          *   ОбъектОтвета   - Структура - Структура с данными обновленного департамента (если `Успех` = Истина).
//          *   ОписаниеОшибки  - Строка - Описание ошибки (если `Успех` = Ложь).
//
Функция ОбновитьДепартаментSigur(Параметры, IDДепартамента, ДанныеДляОбновления) Экспорт
	
	Результат = ПараметрыОтвета();	
	URLСервиса = Параметры.URLСервиса;
	URI         = "/api/v1/departments/" + IDДепартамента; 
	Порт        = Параметры.Порт;
	JWTТокен    = Параметры.Токен;
	
	Попытка
		ТелоЗапроса = ПростаяЗаписьJSON(ДанныеДляОбновления);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при формировании JSON тела запроса: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;

	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		
		ЗапросHTTP = Новый HTTPЗапрос(URI);
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8"); // Отправляем JSON
		
		Ответ = HTTPСоединение.Записать(ЗапросHTTP);
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		// 4. Обработка ответа
		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета); 
			Исключение
				Результат.ОписаниеОшибки = "Ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка при обновлении департамента. Код состояния: " + Результат.КодСтатуса + ". Тело ответа: " + Результат.ТелоОтвета;
			ОбработкаКодовОшибок(Результат);
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

// Функция для создания нового департамента в Sigur
//
// Параметры:
//  Параметры     - Структура - Параметры подключения к Sigur (URLСервиса, Порт, Токен и т.д.)
//  ДанныеДепартамента - Структура - Данные для создания департамента (name, description, parentId, CustomField1, CustomField2 и т.д.)
//
// Возвращаемое значение:
//  Структура:
//   * Успех          - Булево    - Истина, если департамент успешно создан, Ложь - в противном случае
//   * КодСтатуса     - Число     - Код HTTP ответа
//   * ТелоОтвета     - Строка    - Тело HTTP ответа (JSON)
//   * ОбъектОтвета   - Произвольный - Десериализованный объект ответа (если удалось)
//   * ОписаниеОшибки - Строка    - Описание ошибки (если есть)
//
Функция СоздатьДепартаментSigur(Параметры, ДанныеДепартамента) Экспорт
	
	Результат = ПараметрыОтвета();
	URLСервиса = Параметры.URLСервиса;
	URI         = "/api/v1/departments";
	Порт        = Параметры.Порт;
	JWTТокен    = Параметры.Токен;
	
	Попытка
		ТелоЗапроса = ПростаяЗаписьJSON(ДанныеДепартамента); 
	Исключение
		Результат.ОписаниеОшибки = "Ошибка формирования JSON тела запроса: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		
		ЗапросHTTP = Новый HTTPЗапрос(URI); 
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		
		Ответ = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP); 
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		Если Результат.КодСтатуса = 200 Тогда 
			Результат.Успех = Истина;
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета); 
			Исключение
				Результат.ОписаниеОшибки = "Успешный запрос (200), но ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка создания департамента. Код состояния: " + Результат.КодСтатуса + ". Тело ответа: " + Результат.ТелоОтвета;
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция для удаления должностей в Sigur API
//
// Параметры:
//  Параметры     - Структура - Параметры подключения к Sigur (URLСервиса, Порт, Токен и т.д.)
//  ИдентификаторыДолжностей - Массив - Массив числовых идентификаторов должностей, которые нужно удалить
//
// Возвращаемое значение:
//  Структура:
//   * Успех          - Булево    - Истина, если должности успешно удалены, Ложь - в противном случае
//   * КодСтатуса     - Число     - Код HTTP ответа
//   * ТелоОтвета     - Строка    - Тело HTTP ответа (JSON)
//   * ОбъектОтвета   - Массив - Десериализованный массив с идентификаторами удаленных должностей (если удалось)
//   * ОписаниеОшибки - Строка    - Описание ошибки (если есть)
//
Функция УдалитьДолжностиSigur(Параметры, ИдентификаторыДолжностей) Экспорт
	
	Результат = ПараметрыОтвета();
	URLСервиса = Параметры.URLСервиса;
	URI         = "/api/v1/positions/delete";
	Порт        = Параметры.Порт;
	JWTТокен    = Параметры.Токен;
	
	Попытка
		ТелоЗапроса = ПростаяЗаписьJSON(ИдентификаторыДолжностей); 
	Исключение
		Результат.ОписаниеОшибки = "Ошибка формирования JSON тела запроса: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		ЗапросHTTP = Новый HTTPЗапрос(URI);
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		
		Ответ = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета); 
			Исключение
				Результат.ОписаниеОшибки = "Успешный запрос (200), но ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка удаления должностей. Код состояния: " + Результат.КодСтатуса + ". Тело ответа: " + Результат.ТелоОтвета;
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция для получения списка должностей из Sigur API
//
// Параметры:
//  Параметры        - Структура - Параметры подключения к Sigur (URLСервиса, Порт, Токен и т.д.)
//      ПараметрыЗапроса - Структура (Необязательный) - Параметры запроса, которые будут добавлены к URL.
//                         Ключи структуры соответствуют именам параметров запроса, а значения - значениям этих параметров.
//                         Поддерживаемые параметры запроса:
//                          * "id" - Строка - Идентификаторы должностей, разделенные запятыми (например, "1,2,3").
//                                   Используется для получения информации о конкретных должностях.
//                          * "name" - Строка - Фильтр по названию должности (например, "Developer").
//                                     Возвращает только должности, название которых содержит указанную строку.
//                          * "limit" - Строка - Ограничение количества возвращаемых записей (например, "10").
//                                    Максимальное значение: 3000. Используется для пагинации.
//                          * "offset" - Строка - Смещение (пропуск первых записей, например, "20").
//                                     Используется вместе с "limit" для пагинации.  Значение должно быть больше или равно 0.
//                          * "<любое пользовательское поле>" - Строка - Фильтрация по пользовательским полям.
//                                                                  Например, если есть пользовательское поле "externalId", можно использовать "externalId" = "123".
//                          * "includeFields" - Строка - Список полей, которые нужно включить в ответ, разделенные запятыми
//                                            (например, "id,name").  Если этот параметр указан, в ответе будут только указанные поля.
//                          * "excludeFields" - Строка - Список полей, которые нужно исключить из ответа, разделенные запятыми
//                                            (например, "id,customField").  В ответе будут все поля, кроме указанных.
//                          * "sortBy" - Строка - Поле, по которому нужно выполнить сортировку (например, "name").
//                          * "sortOrder" - Строка - Порядок сортировки ("ASC" - по возрастанию, "DESC" - по убыванию).
//
// Возвращаемое значение:
//  Структура:
//   * Успех          - Булево    - Истина, если должности успешно получены, Ложь - в противном случае
//   * КодСтатуса     - Число     - Код HTTP ответа
//   * ТелоОтвета     - Строка    - Тело HTTP ответа (JSON)
//   * ОбъектОтвета   - Массив - Десериализованный массив с должностями (если удалось)
//   * ОписаниеОшибки - Строка    - Описание ошибки (если есть)
//
Функция ПолучитьДолжностиSigur(Параметры, ПараметрыЗапроса = Неопределено) Экспорт
	
	Результат =  ПараметрыОтвета();
	URLСервиса = Параметры.URLСервиса;
	URI         = "/api/v1/positions";
	Порт        = Параметры.Порт;
	JWTТокен    = Параметры.Токен;
	
	СтрокаЗапроса = "";
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		Для Каждого Параметр Из ПараметрыЗапроса Цикл
			Ключ = Параметр.Ключ;
			Значение = Параметр.Значение;
			
			Если ПустаяСтрока(СтрокаЗапроса) Тогда
				СтрокаЗапроса = "?";
			Иначе
				СтрокаЗапроса = СтрокаЗапроса + "&";
			КонецЕсли;
			
			СтрокаЗапроса = СтрокаЗапроса + Ключ + "=" + Значение;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);

		Если Не ПустаяСтрока(СтрокаЗапроса) Тогда
			ЗапросHTTP = Новый HTTPЗапрос(URI + СтрокаЗапроса);
		Иначе
			ЗапросHTTP = Новый HTTPЗапрос(URI);
		КонецЕсли;
		
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		
		Ответ = HTTPСоединение.Получить(ЗапросHTTP);
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета); 
			Исключение
				Результат.ОписаниеОшибки = "Успешный запрос (200), но ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка получения должностей. Код состояния: " + Результат.КодСтатуса + ". Тело ответа: " + Результат.ТелоОтвета;
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция для добавления должности в Sigur API
//
// Параметры:
//  Параметры     - Структура - Параметры подключения к Sigur (URLСервиса, Порт, Токен и т.д.)
//  ДанныеДолжности - Структура - Структура с данными для создания должности (name, <custom field>, ...).  
//                     *Обязательно наличие поля 'name'*
//
// Возвращаемое значение:
//  Структура:
//   * Успех          - Булево    - Истина, если должность успешно добавлена, Ложь - в противном случае
//   * КодСтатуса     - Число     - Код HTTP ответа
//   * ТелоОтвета     - Строка    - Тело HTTP ответа (JSON)
//   * ОбъектОтвета   - Структура - Десериализованная структура с добавленной должностью (если удалось)
//   * ОписаниеОшибки - Строка    - Описание ошибки (если есть)
//
Функция ДобавитьДолжностьSigur(Параметры, ДанныеДолжности) Экспорт
	
	Результат = ПараметрыОтвета();	
	URLСервиса = Параметры.URLСервиса;
	URI         = "/api/v1/positions";
	Порт        = Параметры.Порт;
	JWTТокен    = Параметры.Токен;
	
	Попытка
		ТелоЗапросаJSON = ПростаяЗаписьJSON(ДанныеДолжности);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка формирования JSON тела запроса: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		ЗапросHTTP = Новый HTTPЗапрос(URI);
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапросаJSON, "UTF-8");
		
		Ответ = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета);
			Исключение
				Результат.ОписаниеОшибки = "Успешный запрос (200), но ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка добавления должности. Код состояния: " + Результат.КодСтатуса + ". Тело ответа: " + Результат.ТелоОтвета;
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция ПолучитьСобытияSigur(ПараметрыПодключения, ПараметрыЗапроса) Экспорт
//
//  Назначение:
//      Получает список событий из Sigur API (эндпоинт /api/v1/events).
//
//  Параметры:
//      ПараметрыПодключения - Структура - Параметры подключения к Sigur. Содержит поля:
//                           * "URLСервиса" - Строка - URL адрес сервиса Sigur API.
//                           * "Порт"       - Число  - Порт для подключения к сервису Sigur API.
//                           * "Токен"      - Строка - JWT токен для авторизации.
//      ПараметрыЗапроса - Структура - Параметры запроса к API.  Структура может содержать следующие поля:
//                           * "eventTypeId"    - Строка - Фильтр по типу события (пример: "6,12").
//                           * "lastId"         - Число  - ID последнего полученного события.
//                           * "startTime"      - Строка - Начальное время для фильтрации (пример: "2021-04-01T08:00:00Z").
//                           * "endTime"        - Строка - Конечное время для фильтрации (пример: "2021-04-30T23:59:59Z").
//                           * "accessObjectId" - Число  - ID объекта доступа.
//                           * "accessPointId"  - Число  - ID точки доступа.
//                           * "limit"          - Число  - Максимальное количество возвращаемых событий (от 0 до 3000).
//                           * "offset"         - Число  - Количество пропускаемых событий с начала.
//                           * "includeFields"  - Строка - Список полей для включения в ответ (пример: "type,timestamp").
//                           * "excludeFields"  - Строка - Список полей для исключения из ответа (пример: "id").
//                           * "sortBy"         - Строка - Поле для сортировки (пример: "timestamp").
//                           * "sortOrder"        - Строка - Порядок сортировки ("ASC" или "DESC").
//
//  Возвращаемое значение:
//      Структура:
//          * "Успех"       - Булево - Признак успешного выполнения операции.
//          * "КодСтатуса"  - Число  - Код статуса HTTP ответа.
//          * "ТелоОтвета"  - Строка - Тело HTTP ответа.
//          * "ОбъектОтвета" - Массив - Ответ от Sigur в случае успеха (разобранный JSON).
//          * "ОписаниеОшибки" - Строка - Описание ошибки в случае неудачи.
//
Функция ПолучитьСобытияSigur(ПараметрыПодключения, ПараметрыЗапроса = Неопределено) Экспорт
	
	Результат = ПараметрыОтвета();	
	URLСервиса = ПараметрыПодключения.URLСервиса;
	Порт        = ПараметрыПодключения.Порт;
	JWTТокен    = ПараметрыПодключения.Токен;
	URI         = "/api/v1/events";
	
	СтрокаЗапроса = "";
	
	Если Не ПараметрыЗапроса =  Неопределено Тогда // Проверяем, что не пустая
		Для Каждого Параметр Из ПараметрыЗапроса Цикл
			Ключ = Параметр.Ключ;
			Значение = Параметр.Значение;
			
			Если ПустаяСтрока(СтрокаЗапроса) Тогда
				СтрокаЗапроса = "?";
			Иначе
				СтрокаЗапроса = СтрокаЗапроса + "&";
			КонецЕсли;
			
			СтрокаЗапроса = СтрокаЗапроса + Ключ + "=" + Значение;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		ЗапросHTTP = Новый HTTPЗапрос(URI + СтрокаЗапроса);
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
		
		Ответ = HTTPСоединение.Получить(ЗапросHTTP);
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета); 
				Если ТипЗнч(Результат.ОбъектОтвета) <> Тип("Массив") Тогда
					Результат.ОписаниеОшибки = "Ошибка: Ожидался массив событий, получен: " + ТипЗнч(Результат.ОбъектОтвета);
					Результат.Успех = Ложь;
					Результат.ОбъектОтвета = Неопределено;
				КонецЕсли;
			Исключение
				Результат.ОписаниеОшибки = "Ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка при получении событий. Код состояния: " + Результат.КодСтатуса + ". Тело ответа: " + Результат.ТелоОтвета;
			
			ОбработкаКодовОшибок(Результат);			
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция ПолучитьЗонуПоИдентификаторуSigur(ПараметрыПодключения, ИдентификаторЗоны, ПараметрыЗапроса) Экспорт
//
//  Назначение:
//      Получает информацию о зоне из Sigur API по ее идентификатору (эндпоинт /api/v1/zones/{id}).
//
//  Параметры:
//      ПараметрыПодключения - Структура - Параметры подключения к Sigur. Содержит поля:
//                           * "URLСервиса" - Строка - URL адрес сервиса Sigur API.
//                           * "Порт"       - Число  - Порт для подключения к сервису Sigur API.
//                           * "Токен"      - Строка - JWT токен для авторизации.
//      ИдентификаторЗоны - Число - Идентификатор зоны, информацию о которой необходимо получить.
//      ПараметрыЗапроса - Структура - Параметры запроса к API.  Структура может содержать следующие поля:
//                           * "includeFields"  - Строка - Список полей для включения в ответ (пример: "name").
//                           * "excludeFields"  - Строка - Список полей для исключения из ответа (пример: "id").
//
//  Возвращаемое значение:
//      Структура:
//          * "Успех"       - Булево - Признак успешного выполнения операции.
//          * "КодСтатуса"  - Число  - Код статуса HTTP ответа.
//          * "ТелоОтвета"  - Строка - Тело HTTP ответа.
//          * "ОбъектОтвета" - Структура - Ответ от Sigur в случае успеха (разобранный JSON).
//          * "ОписаниеОшибки" - Строка - Описание ошибки в случае неудачи.
//
Функция ПолучитьЗонуПоИдентификаторуSigur(ПараметрыПодключения, ИдентификаторЗоны, ПараметрыЗапроса= Неопределено) Экспорт
	
	Результат = ПараметрыОтвета();
	URLСервиса = ПараметрыПодключения.URLСервиса;
	Порт        = ПараметрыПодключения.Порт;
	JWTТокен    = ПараметрыПодключения.Токен;
	URI         = "/api/v1/zones/" + ИдентификаторЗоны;
	
	СтрокаЗапроса = "";
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") И ПараметрыЗапроса.Количество() > 0 Тогда
		СтрокаЗапроса = "?";
		ПервыйПараметр = Истина;
		
		Для Каждого Параметр Из ПараметрыЗапроса Цикл
			Ключ = Параметр.Ключ;
			Значение = Параметр.Значение;
			
			Если Не ПервыйПараметр Тогда
				СтрокаЗапроса = СтрокаЗапроса + "&";
			КонецЕсли;
			
			СтрокаЗапроса = СтрокаЗапроса + Ключ + "=" + Значение;
			ПервыйПараметр = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		
		ЗапросHTTP = Новый HTTPЗапрос(URI + СтрокаЗапроса);
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
		
		Ответ = HTTPСоединение.Получить(ЗапросHTTP);
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета); 
				Если ТипЗнч(Результат.ОбъектОтвета) <> Тип("Структура") Тогда
					Результат.ОписаниеОшибки = "Ошибка: Ожидалась структура зоны, получен: " + ТипЗнч(Результат.ОбъектОтвета);
					Результат.Успех = Ложь;
					Результат.ОбъектОтвета = Неопределено;
				КонецЕсли;
			Исключение
				Результат.ОписаниеОшибки = "Ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка при получении зоны. Код состояния: " + Результат.КодСтатуса + ". Тело ответа: " + Результат.ТелоОтвета;
			
			ОбработкаКодовОшибок(Результат);
		КонецЕсли;
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция ПолучитьЗоныSigur(ПараметрыПодключения, ПараметрыЗапроса) Экспорт
//
//  Назначение:
//      Получает список зон из Sigur API (эндпоинт /api/v1/zones).
//
//  Параметры:
//      ПараметрыПодключения - Структура - Параметры подключения к Sigur. Содержит поля:
//                           * "URLСервиса" - Строка - URL адрес сервиса Sigur API.
//                           * "Порт"       - Число  - Порт для подключения к сервису Sigur API.
//                           * "Токен"      - Строка - JWT токен для авторизации.
//      ПараметрыЗапроса - Структура - Параметры запроса к API.  Структура может содержать следующие поля:
//                           * "id"             - Строка - Идентификаторы зон (пример: "1,2" или "1&id=2").
//                           * "accessPointId"  - Число  - Фильтр по точке доступа.
//                           * "name"           - Строка - Фильтр по имени зоны (начинается с).
//                           * "limit"          - Число  - Максимальное количество возвращаемых зон (от 0 до 3000).
//                           * "type"           - Строка - Фильтр по типу зоны (пример: "WORK").
//                           * "offset"         - Число  - Количество пропускаемых зон с начала.
//                           * "includeFields"  - Строка - Список полей для включения в ответ (пример: "name").
//                           * "excludeFields"  - Строка - Список полей для исключения из ответа (пример: "id").
//                           * "sortBy"         - Строка - Поле для сортировки (пример: "name").
//                           * "sortOrder"        - Строка - Порядок сортировки ("ASC" или "DESC").
//
//  Возвращаемое значение:
//      Структура:
//          * "Успех"       - Булево - Признак успешного выполнения операции.
//          * "КодСтатуса"  - Число  - Код статуса HTTP ответа.
//          * "ТелоОтвета"  - Строка - Тело HTTP ответа.
//          * "ОбъектОтвета" - Массив - Ответ от Sigur в случае успеха (разобранный JSON).
//          * "ОписаниеОшибки" - Строка - Описание ошибки в случае неудачи.
//
Функция ПолучитьЗоныSigur(ПараметрыПодключения, ПараметрыЗапроса) Экспорт
	
	Результат = ПараметрыОтвета();
	URLСервиса = ПараметрыПодключения.URLСервиса;
	Порт        = ПараметрыПодключения.Порт;
	JWTТокен    = ПараметрыПодключения.Токен;
	URI         = "/api/v1/zones";
	
	СтрокаЗапроса = "";
	Если  ПараметрыЗапроса.Количество() > 0 Тогда
		Для Каждого Параметр Из ПараметрыЗапроса Цикл
			Ключ = Параметр.Ключ;
			Значение = Параметр.Значение;
			
			Если ПустаяСтрока(СтрокаЗапроса) Тогда
				СтрокаЗапроса = "?";
			Иначе
				СтрокаЗапроса = СтрокаЗапроса + "&";
			КонецЕсли;
			
			Если Ключ = "id" Тогда
				Если ТипЗнч(Значение) = Тип("Массив") Тогда
					Для Каждого Идентификатор Из Значение Цикл
						Если ПустаяСтрока(СтрокаЗапроса) Тогда
							СтрокаЗапроса = "?";
						Иначе
							СтрокаЗапроса = СтрокаЗапроса + "&";
						КонецЕсли;
						СтрокаЗапроса = СтрокаЗапроса + "id=" + Идентификатор;
					КонецЦикла;
					Продолжить; 
				КонецЕсли;
			КонецЕсли;
			
			СтрокаЗапроса = СтрокаЗапроса + Ключ + "=" + Значение;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		
		ЗапросHTTP = Новый HTTPЗапрос(URI + СтрокаЗапроса);
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
		
		Ответ = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета); 
				Если ТипЗнч(Результат.ОбъектОтвета) <> Тип("Массив") Тогда
					Результат.ОписаниеОшибки = "Ошибка: Ожидался массив зон, получен: " + ТипЗнч(Результат.ОбъектОтвета);
					Результат.Успех = Ложь;
					Результат.ОбъектОтвета = Неопределено;
				КонецЕсли;
			Исключение
				Результат.ОписаниеОшибки = "Ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка при получении зон. Код состояния: " + Результат.КодСтатуса + ". Тело ответа: " + Результат.ТелоОтвета;
			ОбработкаКодовОшибок(Результат);
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция для добавления сотрудника в Sigur API
//
// Параметры:
//  Параметры       - Структура - Параметры подключения к Sigur (URLСервиса, Порт, Токен и т.д.)
//  ДанныеСотрудника - Структура - Структура с данными для создания сотрудника. Обязательные поля: name, departmentId, positionId.
//                                  Полный список полей см. в спецификации Sigur API.
//
// Возвращаемое значение:
//  Структура:
//   * Успех          - Булево    - Истина, если сотрудник успешно добавлен, Ложь - в противном случае
//   * КодСтатуса     - Число     - Код HTTP ответа
//   * ТелоОтвета     - Строка    - Тело HTTP ответа (JSON)
//   * ОбъектОтвета   - Структура - Десериализованная структура с добавленным сотрудником (если удалось)
//   * ОписаниеОшибки - Строка    - Описание ошибки (если есть)
//
Функция ДобавитьСотрудникаSigur(Параметры, ДанныеСотрудника) Экспорт
	
	Результат = ПараметрыОтвета();	
	URLСервиса = Параметры.URLСервиса;
	URI         = "/api/v1/employees";
	Порт        = Параметры.Порт;
	JWTТокен    = Параметры.Токен;
	
	Попытка
		ТелоЗапросаJSON = ПростаяЗаписьJSON(ДанныеСотрудника);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка формирования JSON тела запроса: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		
		ЗапросHTTP = Новый HTTPЗапрос(URI);
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапросаJSON, "UTF-8");
		
		Ответ = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета); 
			Исключение
				Результат.ОписаниеОшибки = "Успешный запрос (200), но ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка добавления сотрудника. Код состояния: " + Результат.КодСтатуса + ". Тело ответа: " + Результат.ТелоОтвета;
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция для получения всех сотрудников из Sigur API
//
// Параметры:
//  Параметры - Структура - Параметры подключения к Sigur (URLСервиса, Порт, Токен и т.д.)
//
// Возвращаемое значение:
//  Структура:
//   * Успех          - Булево    - Истина, если сотрудники успешно получены, Ложь - в противном случае
//   * КодСтатуса     - Число     - Код HTTP ответа
//   * ТелоОтвета     - Строка    - Тело HTTP ответа (JSON)
//   * ОбъектОтвета   - Массив    - Массив структур с информацией о сотрудниках (если удалось)
//   * ОписаниеОшибки - Строка    - Описание ошибки (если есть)
//
Функция ПолучитьСотрудниковSigur(Параметры) Экспорт
	
	Результат = ПараметрыОтвета();	
	URLСервиса = Параметры.URLСервиса;
	URI         = "/api/v1/employees";
	Порт        = Параметры.Порт;
	JWTТокен    = Параметры.Токен;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		
		ЗапросHTTP = Новый HTTPЗапрос(URI);
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
		
		Ответ = HTTPСоединение.Получить(ЗапросHTTP);
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета);
				Если ТипЗнч(Результат.ОбъектОтвета) <> Тип("Массив") Тогда
					Результат.ОписаниеОшибки = "Ошибка: Ожидался массив сотрудников, получен: " + ТипЗнч(Результат.ОбъектОтвета);
					Результат.Успех = Ложь;
					Результат.ОбъектОтвета = Неопределено;
				КонецЕсли;
			Исключение
				Результат.ОписаниеОшибки = "Ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка при получении сотрудников. Код состояния: " + Результат.КодСтатуса + ". Тело ответа: " + Результат.ТелоОтвета;
			ОбработкаКодовОшибок(Результат);
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция УдалитьПодразделенияSigur(Параметры, IDДепартаментов) Экспорт
//
//  Назначение:
//      Удаляет департаменты в Sigur по их идентификаторам.
//      **ВНИМАНИЕ: Никогда не вызывайте эту функцию с пустым массивом ID департаментов!
//                 Это может привести к удалению всех департаментов в системе Sigur.**
//
//  Параметры:
//      Параметры - Структура - Параметры подключения к Sigur API.
//      IDДепартаментов - Массив - Массив идентификаторов департаментов для удаления.
//                        **ВАЖНО: Массив не должен быть пустым!**
//
//  Возвращаемое значение:
//      Результат - Структура:
//          *   Успех           - Булево - Истина, если операция выполнена успешно, иначе Ложь.
//          *   КодСтатуса      - Число - Код состояния HTTP ответа.
//          *   ТелоОтвета      - Строка - Тело HTTP ответа.
//          *   ОбъектОтвета   - Произвольный - Разобранный JSON ответ (если `Успех` = Истина).
//          *   ОписаниеОшибки  - Строка - Описание ошибки (если `Успех` = Ложь).
//
Функция УдалитьПодразделенияSigur(Параметры, IDДепартаментов) Экспорт

	Результат = ПараметрыОтвета();
	URLСервиса = Параметры.URLСервиса;
	URI         = "/api/v1/departments/delete";
	Порт        = Параметры.Порт;
	JWTТокен    = Параметры.Токен;
	
	Попытка
		ТелоЗапроса = ПростаяЗаписьJSON(IDДепартаментов);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при формировании JSON тела запроса: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;

	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		ЗапросHTTP = Новый HTTPЗапрос(URI);
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8"); // Отправляем JSON

		Ответ = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);

		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");

		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета); 
				Если ТипЗнч(Результат.ОбъектОтвета) <> Тип("Массив") Тогда
					Результат.ОписаниеОшибки = "Ошибка: Ожидался массив ID удаленных департаментов, получен: " + ТипЗнч(Результат.ОбъектОтвета);
					Результат.Успех = Ложь;
					Результат.ОбъектОтвета = Неопределено;
				КонецЕсли;
			Исключение
				Результат.ОписаниеОшибки = "Ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка при удалении департаментов. Код состояния: " + Результат.КодСтатуса + ". Тело ответа: " + Результат.ТелоОтвета;
			ОбработкаКодовОшибок(Результат);
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция ИзменитьСотрудникаSigur(Параметры, ДанныеСотрудника) Экспорт
//
//  Назначение:
//      Изменяет данные сотрудника в Sigur с использованием API (PUT api/v1/employees/{id}).
//
//  Параметры:
//      Параметры     - Структура - Параметры подключения к Sigur (URLСервиса, Порт, Токен и т.д.).
//      ДанныеСотрудника - Структура - Данные сотрудника для изменения (Body).  Структура может содержать следующие поля:
//                           * "id"            - Строка  - *ОБЯЗАТЕЛЬНО!* ID сотрудника в Sigur.
//                           * "name"          - Строка  - Имя сотрудника.
//                           * "departmentId"  - Число   - ID подразделения сотрудника.
//                           * "departmentName" - Строка  - Название подразделения сотрудника.
//                           * "positionId"    - Число   - ID должности сотрудника.
//                           * "positionName"  - Строка  - Название должности сотрудника.
//                           * "photo"         - Строка  - Ссылка на фотографию сотрудника (URL или Base64-encoded data).
//                           * "isBlocked"     - Булево  - Признак блокировки сотрудника.
//                           * "description"   - Строка  - Описание сотрудника.
//                           * "tabId"         - Строка  - ID вкладки сотрудника.
//                           * "location"      - Структура - Информация о местоположении сотрудника (зона, время входа):
//                               * "zoneId"      - Число   - ID зоны местоположения сотрудника.
//                               * "zoneName"    - Строка  - Название зоны местоположения сотрудника.
//                               * "entranceTime"  - Строка  - Время входа сотрудника в зону.
//                           * "vehicles"      - Массив  - Массив структур с информацией о транспортных средствах сотрудника:
//                               * "id"          - Число   - ID транспортного средства.
//                               * "lpNumber"    - Строка  - Номер транспортного средства.
//                           * "contactDetails" - Массив  - Массив структур с контактной информацией:
//                               * "type"        - Строка  - Тип контакта ("SMS", "VIBER", "TELEGRAM", "EMAIL").
//                               * "value"       - Строка  - Значение контакта (номер телефона, email и т.д.).
//                               * "preferable"  - Булево  - Признак того, что этот контакт является предпочтительным.
//                               * "description" - Строка - Описание контакта
//                               * "tabId"       - Строка - ID вкладки контакта
//                           * "<custom field>" - Зависит от типа поля - Пользовательские поля (тип данных определяется в Sigur).
//
//  Возвращаемое значение:
//      Структура:
//          * "Успех"       - Булево - Признак успешного выполнения операции.
//          * "КодСтатуса"  - Число  - Код статуса HTTP ответа.
//          * "ТелоОтвета"  - Строка - Тело HTTP ответа.
//          * "ОбъектОтвета" - Структура - Ответ от Sigur в случае успеха (разобранный JSON).
//          * "ОписаниеОшибки" - Строка - Описание ошибки в случае неудачи.
//
Функция ИзменитьСотрудникаSigur(Параметры, ДанныеСотрудника) Экспорт
	
	Результат = ПараметрыОтвета();
	URLСервиса = Параметры.URLСервиса;
	Порт        = Параметры.Порт;
	JWTТокен    = Параметры.Токен;
	
	IDСотрудника = ДанныеСотрудника.id;
	URI = "/api/v1/employees/" + IDСотрудника;
	
	Попытка
		ТелоЗапросаJSON = ПростаяЗаписьJSON(ДанныеСотрудника);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка формирования JSON тела запроса: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		
		ЗапросHTTP = Новый HTTPЗапрос(URI);
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапросаJSON, "UTF-8");
		
		Ответ = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP); //  Используем PUT
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета); // Читаем как структуру
			Исключение
				Результат.ОписаниеОшибки = "Успешный запрос (200), но ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка изменения сотрудника. Код состояния: " + Результат.КодСтатуса + ". Тело ответа: " + Результат.ТелоОтвета;
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Процедура СинхронизироватьСобытияSigur(ПараметрыПодключения, ПериодСинхронизации) Экспорт
//
//  Назначение:
//      Получает события из Sigur API, сопоставляет их с данными 1С и записывает в регистр сведений.
//
//  Параметры:
//      ПараметрыПодключения - Структура - Параметры подключения к Sigur (URLСервиса, Токен, Порт).
//      ПериодСинхронизации  - Структура - Период, за который нужно получить события. Содержит поля:
//                             * "НачалоПериода" - Дата - Дата начала периода.
//                             * "КонецПериода"   - Дата - Дата окончания периода.
//
// ---------------------------------------------------------------------------------------
Процедура СинхронизироватьСобытияSigur(ПараметрыПодключения, ПараметрыЗапроса) Экспорт
	
	РезультатПолученияСобытий = ПолучитьСобытияSigur(ПараметрыПодключения, ПараметрыЗапроса);
	
	Если Не РезультатПолученияСобытий.Успех Тогда
		Сообщить("Ошибка при получении событий из Sigur: " + РезультатПолученияСобытий.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	СобытияSigur = РезультатПолученияСобытий.ОбъектОтвета;
	
	ТаблицаСобитыйSigur = ПреобразоватьМассивВТаблицуЗначений(СобытияSigur);
	
	СопоставитьС1с(ПараметрыПодключения,ТаблицаСобитыйSigur)
		
КонецПроцедуры

// Функция ПолучитьТочкуДоступаПоИдентификаторуSigur(ПараметрыПодключения, ИдентификаторТочкиДоступа, ПараметрыЗапроса) Экспорт
//
//  Назначение:
//      Получает информацию о точке доступа из Sigur API по ее идентификатору (эндпоинт /api/v1/accesspoints/{id}).
//
//  Параметры:
//      ПараметрыПодключения - Структура - Параметры подключения к Sigur. Содержит поля:
//                           * "URLСервиса" - Строка - URL адрес сервиса Sigur API.
//                           * "Порт"       - Число  - Порт для подключения к сервису Sigur API.
//                           * "Токен"      - Строка - JWT токен для авторизации.
//      ИдентификаторТочкиДоступа - Число - Идентификатор точки доступа, информацию о которой необходимо получить.
//      ПараметрыЗапроса - Структура - Параметры запроса к API.  Структура может содержать следующие поля:
//                           * "includeFields"  - Строка - Список полей для включения в ответ (пример: "name").
//                           * "excludeFields"  - Строка - Список полей для исключения из ответа (пример: "id").
//
//  Возвращаемое значение:
//      Структура:
//          * "Успех"       - Булево - Признак успешного выполнения операции.
//          * "КодСтатуса"  - Число  - Код статуса HTTP ответа.
//          * "ТелоОтвета"  - Строка - Тело HTTP ответа.
//          * "ОбъектОтвета" - Структура - Ответ от Sigur в случае успеха (разобранный JSON).
//          * "ОписаниеОшибки" - Строка - Описание ошибки в случае неудачи.
//
Функция ПолучитьТочкуДоступаПоИдентификаторуSigur(ПараметрыПодключения, ИдентификаторТочкиДоступа, ПараметрыЗапроса = Неопределено) Экспорт
	
	Результат = ПараметрыОтвета();
	URLСервиса = ПараметрыПодключения.URLСервиса;
	Порт        = ПараметрыПодключения.Порт;
	JWTТокен    = ПараметрыПодключения.Токен;
	URI         = "/api/v1/accesspoints/" + ИдентификаторТочкиДоступа;
	
	СтрокаЗапроса = "";
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") И ПараметрыЗапроса.Количество() > 0 Тогда
		СтрокаЗапроса = "?";
		ПервыйПараметр = Истина;
		
		Для Каждого Параметр Из ПараметрыЗапроса Цикл
			Ключ = Параметр.Ключ;
			Значение = Параметр.Значение;
			
			Если Не ПервыйПараметр Тогда
				СтрокаЗапроса = СтрокаЗапроса + "&";
			КонецЕсли;
			
			СтрокаЗапроса = СтрокаЗапроса + Ключ + "=" + Значение;
			ПервыйПараметр = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		
		ЗапросHTTP = Новый HTTPЗапрос(URI + СтрокаЗапроса);
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
		
		Ответ = HTTPСоединение.Получить(ЗапросHTTP);
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета); 
				Если ТипЗнч(Результат.ОбъектОтвета) <> Тип("Структура") Тогда
					Результат.ОписаниеОшибки = "Ошибка: Ожидалась структура точки доступа, получен: " + ТипЗнч(Результат.ОбъектОтвета);
					Результат.Успех = Ложь;
					Результат.ОбъектОтвета = Неопределено;
				КонецЕсли;
			Исключение
				Результат.ОписаниеОшибки = "Ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка при получении точки доступа. Код состояния: " + Результат.КодСтатуса + ". Тело ответа: " + Результат.ТелоОтвета;
			
			ОбработкаКодовОшибок(Результат);
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция УдалитьСотрудникаSigur(Параметры, IDСотрудника) Экспорт
//
//  Назначение:
//      Удаляет сотрудника в Sigur API.
//
//  Параметры:
//      Параметры - Структура - Параметры подключения к Sigur API (URLСервиса, Порт, Токен).
//      IDСотрудника - Число - Идентификатор сотрудника, которого нужно удалить.
//
//  Возвращаемое значение:
//      Результат - Структура:
//          *   Успех           - Булево - Истина, если операция выполнена успешно, иначе Ложь.
//          *   КодСтатуса      - Число - Код состояния HTTP ответа.
//          *   ТелоОтвета      - Строка - Тело HTTP ответа.
//          *   ОбъектОтвета   - Структура - Структура с данными удаленного сотрудника (если `Успех` = Истина).
//          *   ОписаниеОшибки  - Строка - Описание ошибки (если `Успех` = Ложь).
//
Функция УдалитьСотрудникаSigur(Параметры, IDСотрудника) Экспорт
	
	Результат = ПараметрыОтвета(); 
	URLСервиса = Параметры.URLСервиса;
	URI         = "/api/v1/employees/" + IDСотрудника;
	Порт        = Параметры.Порт;
	JWTТокен    = Параметры.Токен;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		
		ЗапросHTTP = Новый HTTPЗапрос(URI);
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		
		Ответ = HTTPСоединение.Удалить(ЗапросHTTP);
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета);
			Исключение
				Результат.ОписаниеОшибки = "Ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			ОбработкаКодовОшибок(Результат); 
			
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция УдалитьСотрудниковSigur(Параметры, IDСотрудников) Экспорт
//
//  Назначение:
//      Удаляет несколько сотрудников в Sigur API за один запрос.
//
//  Параметры:
//      Параметры - Структура - Параметры подключения к Sigur API (URLСервиса, Порт, Токен).
//      IDСотрудников - Массив - Массив идентификаторов сотрудников, которых нужно удалить.
//      Острожно : Вызывав эту функцию с пустым массивом IDСотрудников!**
//      *   Это может привести к удалению всех сотрудников в системе.
//  Возвращаемое значение:
//      Результат - Структура:
//          *   Успех           - Булево - Истина, если операция выполнена успешно, иначе Ложь.
//          *   КодСтатуса      - Число - Код состояния HTTP ответа.
//          *   ТелоОтвета      - Строка - Тело HTTP ответа.
//          *   ОбъектОтвета   - Массив - Массив идентификаторов удаленных сотрудников (если `Успех` = Истина).
//          *   ОписаниеОшибки  - Строка - Описание ошибки (если `Успех` = Ложь).
Функция УдалитьСотрудниковSigur(Параметры, IDСотрудников) Экспорт
	
	Результат = ПараметрыОтвета(); 
	
	URLСервиса = Параметры.URLСервиса;
	URI         = "/api/v1/employees/delete";
	Порт        = Параметры.Порт;
	JWTТокен    = Параметры.Токен;
	
	Попытка
		ТелоЗапроса = ПростаяЗаписьJSON(IDСотрудников);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при формировании JSON тела запроса: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(URLСервиса, Порт);
		
		ЗапросHTTP = Новый HTTPЗапрос(URI);
		ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + JWTТокен);
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "applicatio
		
		Ответ = HTTPСоединение.POST(ЗапросHTTP);
		
		Результат.КодСтатуса = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		Если Результат.КодСтатуса = 200 Тогда
			Результат.Успех = Истина;
			
			Попытка
				Результат.ОбъектОтвета = ПростоеЧтениеJSON(Результат.ТелоОтвета); 
			Исключение
				Результат.ОписаниеОшибки = "Ошибка при разборе JSON ответа: " + ОписаниеОшибки();
			КонецПопытки;
		Иначе
			ОбработкаКодовОшибок(Результат); 
			
		КонецЕсли;
		
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыСигура(Ссылка)   Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиЗагрузки = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Ссылка, "Параметры");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НастройкиЗагрузки;
	
КонецФункции // () 

Процедура ЗаписатьТокены (Параметры)  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Параметры.Обработка,Параметры,"Параметры");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ()

Функция ПростаяЗаписьJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;			
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,Данные);			
	Возврат ЗаписьJSON.Закрыть();  
	
КонецФункции

Функция ПростоеЧтениеJSON(Данные)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Данные);  		
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции 

Функция ПолучитьДанныеДляВыгрузкиВСКУД()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НТ_ОбъектыДляВыгрузкиВСКУД.НомерСообщения КАК НомерСообщения,
	               |	НТ_ОбъектыДляВыгрузкиВСКУД.ТипОповещенияДляСКУД,
	               |	НТ_ОбъектыДляВыгрузкиВСКУД.Объект,
	               |	НТ_ОбъектыДляВыгрузкиВСКУД.ПодразделениеФизЛица,
	               |	НТ_ОбъектыДляВыгрузкиВСКУД.ДолжностьФизЛица,
	               |	НТ_ОбъектыДляВыгрузкиВСКУД.ТабельныйНомерФизЛица,
	               |	НТ_ОбъектыДляВыгрузкиВСКУД.ДатаРегистрации КАК ДатаРегистрации,
	               |	ИСТИНА КАК ОбрабатыватьЗапись
	               |ИЗ
	               |	РегистрСведений.НТ_ОбъектыДляВыгрузкиВСКУД КАК НТ_ОбъектыДляВыгрузкиВСКУД
	               |ГДЕ
	               |	НТ_ОбъектыДляВыгрузкиВСКУД.ВыгруженВСигур = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСообщения УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОбработатьДанныеПоДолжностям(СтруктураСоединений, ДанныеДляВыгрузки, Ответственный)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипОповещенияДляСКУД", Перечисления.НТ_ТипыОповещенийДляСКУД.КорректировкаДолжности);
	
	СтрокиДолжностей = ДанныеДляВыгрузки.НайтиСтроки(Отбор);
	
	// Если массив строк должностей пустой, тогда ничего делать не надо.
	Если СтрокиДолжностей.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем массив должностей из переданного массива строк
	Должности = Новый Массив;
	Для каждого стр из СтрокиДолжностей Цикл
		Должность = стр.Объект;
		
		Если Должности.Найти(Должность)=Неопределено Тогда
			Должности.Добавить(Должность);		
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ПодготовитьТаблицуДолжностей(Запрос, Должности);
	Если НЕ Результат.УспешноеЗавершение Тогда
		ОбщегоНазначения.ЗаписатьОшибкуВЖурналРегистрации("СинхронизацияСигур","В базе 1С обнаружены дублирующиеся уникальные идентификаторы должностей. Выгрузка должностей остановлена.");
		Возврат;
	КонецЕсли;
	ДолжностиТЗ = Результат.ДолжностиТЗ;
	
	//Результат = ВыгрузитьДолжностиВСигур(СтруктураСоединений, ДолжностиТЗ, Ответственный);
	Если НЕ Результат.УспешноеЗавершение Тогда
		ТекстОшибки = "Ошибка при выгрузке должностей в СКУД. Код состояния: "+СокрЛП(Результат.КодСостояния)+", описание ошибки: "+СокрЛП(Результат.СообщениеОбОшибке);
		ОбщегоНазначения.ЗаписатьОшибкуВЖурналРегистрации("СинхронизацияСигур",ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Проверка корректности выгрузки должностей в СКУД "Темпо Реале".
	//Результат = ПроверитьПравильностьВыгрузкиДолжностейВСКУД(СтруктураСоединений, Запрос);
	Если НЕ Результат.УспешноеЗавершение Тогда
		ТекстОшибки = "Ошибка при проверке выгрузки должностей в СКУД. "+СокрЛП(Результат.СообщениеОбОшибке);
		ОбщегоНазначения.ЗаписатьОшибкуВЖурналРегистрации("СинхронизацияСигур",ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Если выгрузка должностей и проверка прошли успешно, можно удалять записи из регистра сведений "НТ_ОбъектыДляВыгрузкиВСКУД".
	// Строки для удаления содержатся во входящем параметре процедуры "МассивСтрокДолжностей".
	//ОчиститьДанныеДляВыгрузки(СтрокиДолжностей);
	
КонецПроцедуры

Функция ПодготовитьТаблицуДолжностей(Запрос, Должности)
	
	// Проверка корректности исходных данных по должностям
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДолжностиОрганизаций.Ссылка КАК Должность,
	|	ДолжностиОрганизаций.Наименование КАК НаименованиеДолжности
	|ИЗ
	|	Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|ГДЕ
	|	ДолжностиОрганизаций.Ссылка В (&МассивДолжностей)
	|";
	
	Запрос.УстановитьПараметр("МассивДолжностей",Должности);
	
	ДолжностиТЗ = Запрос.Выполнить().Выгрузить();
	ДолжностиТЗ.Колонки.Добавить("ДолжностьUID", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
	
	Для каждого стр из ДолжностиТЗ Цикл
		стр.ДолжностьUID 			= СокрЛП(стр.Должность.УникальныйИдентификатор());
		стр.НаименованиеДолжности 	= Лев(СокрЛП(стр.НаименованиеДолжности),100);
	КонецЦикла;
	ДолжностиТЗ.Сортировать("НаименованиеДолжности");
	
	// Проверка на уникальность идентификаторов должностей
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТЗ.Должность,
	|	ТЗ.НаименованиеДолжности,
	|	ТЗ.ДолжностьUID
	|ПОМЕСТИТЬ ВТ_Должности1С
	|ИЗ
	|	&ДолжностиТЗ КАК ТЗ
	|;
	|
	|//////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Должности1С.ДолжностьUID,
	|	Количество(ВТ_Должности1С.ДолжностьUID) КАК Количество
	|ИЗ
	|	ВТ_Должности1С
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Должности1С.ДолжностьUID
	|ИМЕЮЩИЕ
	|	Количество(ВТ_Должности1С.ДолжностьUID)>1
	|";
	
	Запрос.УстановитьПараметр("ДолжностиТЗ", ДолжностиТЗ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Результат.Вставить("ДолжностиТЗ",			ДолжностиТЗ);
	Результат.Вставить("УспешноеЗавершение",	РезультатЗапроса.Пустой());
	
	Возврат Результат;
	
КонецФункции

Функция ПеробразованиеДаты(ИсходнаяСтрока)
	
	ИндексТочки = СтрНайти(ИсходнаяСтрока,".") -1;
	БезПояса = Лев(ИсходнаяСтрока,ИндексТочки);
	
	Возврат ПрочитатьДатуJSON(БезПояса,ФорматДатыJSON.ISO);
	
КонецФункции // ()


// Процедура СоздатьПодразделениеВSigur(Параметры) Экспорт
//
//  Назначение:
//      Создает иерархию подразделений из 1С в Sigur API.  Обходит справочник "ПодразделенияОрганизаций"
//      и создает соответствующие департаменты в Sigur, сохраняя соответствие идентификаторов.
//
//  Параметры:
//      Параметры - Структура - Структура с параметрами подключения к Sigur API.
//                  Содержит поля:
//                  * "URLСервиса" - Строка - URL адрес сервиса Sigur API.
//                  * "Порт"       - Число  - Порт для подключения к сервису Sigur API.
//                  * "Токен"      - Строка - JWT токен для авторизации.
//                  * ... (другие параметры, необходимые для функции СоздатьДепартаментSigur).
//
Процедура СоздатьПодразделениеВSigur(Параметры)
	
	СигурID = ПолучитьСвойсвоПланВидовХарактеристик("СигурID",ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций);
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Родитель,
	|	ПодразделенияОрганизаций.Ссылка КАК Ссылка,
	|	ПодразделенияОрганизаций.Наименование КАК НаименованиеПодразделения,
	|	ЗначенияСвойствРодителя.Значение КАК РодительСигурID
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ПодразделенияОрганизаций.Ссылка = ЗначенияСвойствОбъектов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствРодителя
	|		ПО ПодразделенияОрганизаций.Родитель = ЗначенияСвойствРодителя.Объект
	|ГДЕ
	|	ПодразделенияОрганизаций.ПометкаУдаления = ЛОЖЬ
	|	И ЗначенияСвойствОбъектов.Значение = 0
	|	И ЗначенияСвойствОбъектов.Свойство = &СигурID
	|	И ЗначенияСвойствРодителя.Свойство = &СигурID
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("СигурID",СигурID);
	
	РезультатЗапроса  = Запрос.Выполнить();
	Если РезультатЗапроса.пустой() Тогда
		Возврат; 
	КонецЕсли;
	
	ПодразделенияТЗ = Новый ТаблицаЗначений;
	ПодразделенияТЗ.Колонки.Добавить("Подразделение", 					Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ПодразделенияТЗ.Колонки.Добавить("НаименованиеПодразделения", 		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(64)));
	ПодразделенияТЗ.Колонки.Добавить("ПодразделениеUID", 				Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
	ПодразделенияТЗ.Колонки.Добавить("СигурID", 						Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла()));
	ПодразделенияТЗ.Колонки.Добавить("РодительскоеПодразделение", 		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ПодразделенияТЗ.Колонки.Добавить("РодительскоеПодразделениеUID", 	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
	ПодразделенияТЗ.Колонки.Добавить("РодительСигурID", 				Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла()));
	ПодразделенияТЗ.Колонки.Добавить("Уровень", 						Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2)));
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗаполнитьТаблицуПодразделенийРекурсивно(Выборка, ПодразделенияТЗ);
	ПодразделенияТЗ.Сортировать("Уровень, НаименованиеПодразделения");
	
	Уровни = ПодразделенияТЗ.Скопировать();
	Уровни.Свернуть("Уровень");
	
	Для каждого стр Из Уровни Цикл
		ПараметрыОтбора = новый Структура;
		ПараметрыОтбора.Вставить("Уровень",стр.Уровень);
		Строки = ПодразделенияТЗ.НайтиСтроки(ПараметрыОтбора);
		
		Для каждого строка Из Строки Цикл
			
			ДанныеПодразделения = Новый Структура;
			ДанныеПодразделения.Вставить("parentId",строка.РодительСигурID);
			ДанныеПодразделения.Вставить("name",строка.НаименованиеПодразделения);
			//ДанныеПодразделения.Вставить("guid",строка.ПодразделениеUID);
			
			Результат = СоздатьДепартаментSigur(Параметры,ДанныеПодразделения);
			строка.СигурID =Результат.ОбъектОтвета["id"]; 
			ПараметрыОтбора = новый Структура;
			ПараметрыОтбора.Вставить("РодительскоеПодразделение",строка.Подразделение);
			Подчиненые = ПодразделенияТЗ.НайтиСтроки(ПараметрыОтбора);
			
			Для каждого Подчиненного Из Подчиненые Цикл
				Подчиненного.РодительСигурID = Результат.ОбъектОтвета["id"];
			КонецЦикла;
			
			ЗАписатьДополнительныйРеквизит (Результат.ОбъектОтвета["id"],строка.Подразделение,СигурID);
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТаблицуПодразделенийРекурсивно(Выборка, ПодразделенияТЗ)
	
	Пока Выборка.Следующий() Цикл
		
		Если ПодразделенияТЗ.Найти(Выборка.Ссылка,"Подразделение")= Неопределено Тогда
			
			НовСтр = ПодразделенияТЗ.Добавить();
			НовСтр.РодительскоеПодразделение 	= Выборка.Родитель;
			НовСтр.Подразделение 				= Выборка.Ссылка;
			НовСтр.НаименованиеПодразделения 	= Лев(СокрЛП(Выборка.НаименованиеПодразделения),64);
			НовСтр.ПодразделениеUID				= СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
				НовСтр.РодительскоеПодразделениеUID	= СокрЛП(Выборка.Родитель.УникальныйИдентификатор());
			Иначе
				НовСтр.РодительскоеПодразделениеUID	= "";
			КонецЕсли;
			НовСтр.Уровень						= Выборка.Ссылка.Уровень()+1;
			
		КонецЕсли;
		
		ЗаполнитьТаблицуПодразделенийРекурсивно(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, Выборка.Группировка()), ПодразделенияТЗ);
		
	КонецЦикла;
	
КонецПроцедуры


// Процедура ЗаписатьДополнительныйРеквизит (ID, Подразделение, СигурID)
//
//	Назначение:
//		Записывает значение дополнительного реквизита для объекта.
//
// Параметры:
//		ID - Строка - Идентификатор объекта в Sigur.
//		Подразделение - СправочникСсылка.ДолжностиОрганизаций - Ссылка на элемент справочника "ДолжностиОрганизаций".
//		СигурID - ПланВидовХарактеристикСсылка.СвойстваОбъектов - Ссылка на элемент плана видов характеристик, определяющий свойство "SigurIDДолжности".
//
Процедура ЗаписатьДополнительныйРеквизит (ID,Объект,СигурID)
	
	НаборДанных = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборДанных.Отбор.Объект.Установить(Объект);
	НаборДанных.Отбор.Свойство.Установить(СигурID);
	НаборДанных.Прочитать();
	
	Если НаборДанных.Количество() = 0 Тогда
		НоваяЗапись = НаборДанных.Добавить();
		НоваяЗапись.Объект = Объект;
		НоваяЗапись.Свойство = СигурID;
		НоваяЗапись.Значение = ID;
	Иначе 
		НаборДанных[0].Значение = ID;  
	КонецЕсли;
	
	НаборДанных.Записать();
	
КонецПроцедуры

Функция ПолучитьСвойсвоПланВидовХарактеристик(Наименование,НазначениеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвойстваОбъектов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|ГДЕ
	|	СвойстваОбъектов.Наименование = &Наименование
	|	И СвойстваОбъектов.НазначениеСвойства = &НазначениеСвойства";
	
	Запрос.УстановитьПараметр("НазначениеСвойства", НазначениеСвойства);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат  ВыборкаДетальныеЗаписи.Ссылка;
	
КонецФункции // ПолучитьСвойсвоПланВидовХарактеристик()

// Процедура для миграции должностей из Sigur в 1С и обратно (удаление и добавление)
//
// Параметры:
//  Параметры - Структура - Параметры подключения к Sigur (URLСервиса, Порт, Токен и т.д.)
// 
Процедура СопоставлениеДолжностейSigur(Параметры) 
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Сообщить("Ошибка: Неверный тип параметра ""Параметры"". Ожидается структура.");
		Возврат;
	КонецЕсли;
	
	РезультатПолучения = ПолучитьДолжностиSigur(Параметры);
	
	Если Не РезультатПолучения.Успех Тогда
		Сообщить("Ошибка при получении должностей из Sigur: " + РезультатПолучения.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ДолжностиSigur = РезультатПолучения.ОбъектОтвета;
	ТЗДолжности1С = ПолучитьДолжностиИз1С(); 
	ТЗДолжностиSigur = ПреобразоватьМассивВТаблицуЗначений(ДолжностиSigur);
	
	РезультатСравнения = СравнитьДолжностиИзSigurС1С (ТЗДолжности1С,ТЗДолжностиSigur);
	ТЗДолжностиSigur =  РезультатСравнения.ТЗДолжностиSigur;
	ТЗДолжности1С = РезультатСравнения.ТЗДолжности1С;
	ТЗСопоставленные = РезультатСравнения.ТЗСопоставленные;
	
	// 2. Добавляем в массив только ID из полученных должностей после сравнения
	ИдентификаторовДляУдаления = Новый Массив;
	Для Каждого Должность Из ТЗДолжностиSigur Цикл
		ИдентификаторовДляУдаления.Добавить(Должность.id);
		
	КонецЦикла;
	
	// 3. Удаляем все должности из Sigur
	Если ИдентификаторовДляУдаления.Количество() > 0 Тогда
		РезультатУдаления = УдалитьДолжностиSigur(Параметры, ИдентификаторовДляУдаления);
		
		Если Не РезультатУдаления.Успех Тогда
			Сообщить("Ошибка при удалении должностей из Sigur: " + РезультатУдаления.ОписаниеОшибки);
			Возврат;
		КонецЕсли;
		
		Сообщить("Удаление должностей из Sigur завершено. Удалено " + ИдентификаторовДляУдаления.Количество() + " должностей.");
	Иначе
		Сообщить("Нет должностей для удаления в Sigur.");
	КонецЕсли;
	
	
	// 4. Добавляем все должности из 1С в Sigur 
	
		
	// Добавляем поле GUID и заполняем его
	ТЗДолжности1С.Колонки.Добавить("GUID", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	Для Каждого СтрокаТЗ Из ТЗДолжности1С Цикл
		СтрокаТЗ.GUID = СокрЛП(СтрокаТЗ.Ссылка.УникальныйИдентификатор());
	КонецЦикла;
	
	// Проверяем на дубликаты
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Ссылка,
	|	ТЗ.GUID
	|ПОМЕСТИТЬ ВТ_Должности1С
	|ИЗ
	|	&ДолжностиТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Должности1С.GUID,
	|	КОЛИЧЕСТВО(ВТ_Должности1С.GUID) КАК Количество
	|ИЗ
	|	ВТ_Должности1С КАК ВТ_Должности1С
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Должности1С.GUID
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВТ_Должности1С.GUID) > 1";
	
	Запрос.УстановитьПараметр("ДолжностиТЗ", ТЗДолжности1С);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Сообщить("Обнаружены дубликаты должностей в 1С. Добавление в Sigur отменено!");
		
		ВыборкаДубликатов = РезультатЗапроса.Выбрать();
		Пока ВыборкаДубликатов.Следующий() Цикл
			Сообщить("Дубликат: Наименование = " + ВыборкаДубликатов.Наименование + ", GUID = " + ВыборкаДубликатов.GUID);
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	СигурID = ПолучитьСвойсвоПланВидовХарактеристик("СигурID",ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДолжностиОрганизаций);
	
	// Добавляем должности в Sigur
	Для Каждого СтрокаТЗ Из ТЗДолжности1С Цикл
		// Создаем структуру с данными должности для Sigur
		ДанныеДляSigur = Новый Структура;
		ДанныеДляSigur.Вставить("name", СтрокаТЗ.Наименование);
		
		// Добавляем должность в Sigur
		РезультатДобавления = ДобавитьДолжностьSigur(Параметры, ДанныеДляSigur);
		
		Если Не РезультатДобавления.Успех Тогда
			Сообщить("Ошибка при добавлении должности """ + СтрокаТЗ.Наименование + """ в Sigur: " + РезультатДобавления.ОписаниеОшибки);
		Иначе
			Сообщить("Должность """ + СтрокаТЗ.Наименование + """ успешно добавлена в Sigur. ID: " + РезультатДобавления.ОбъектОтвета.id);
			
			// Записываем соответствие в регистр сведений
			ЗаписатьДополнительныйРеквизит(РезультатДобавления.ОбъектОтвета.id, СтрокаТЗ.Ссылка, СигурID); 
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем id для должностей которые сопоставились 
	Для каждого стр  Из ТЗСопоставленные Цикл	
		 ЗаписатьДополнительныйРеквизит(стр.id, стр.Ссылка, СигурID);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДолжностиИз1С() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДолжностиОрганизаций.Ссылка КАК Ссылка,
	|	ДолжностиОрганизаций.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
	|ГДЕ
	|	ДолжностиОрганизаций.ПометкаУдаления = ЛОЖЬ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Процедура для сопоставления сотрудников из Sigur с сотрудниками в 1С
//
// Параметры:
//  Параметры - Структура - Параметры подключения к Sigur (URLСервиса, Порт, Токен и т.д.)
Процедура СопоставлениеСотрудниковSigur(Параметры) Экспорт
	
	// 1. Получаем всех сотрудников из Sigur
	РезультатПолученияSigur = ПолучитьСотрудниковSigur(Параметры);
	
	Если Не РезультатПолученияSigur.Успех Тогда
		Сообщить("Ошибка при получении сотрудников из Sigur: " + РезультатПолученияSigur.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	СигурID = ПолучитьСвойсвоПланВидовХарактеристик("СигурID",ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций);
	
	СотрудникиSigur = РезультатПолученияSigur.ОбъектОтвета;
	
	// 2. Получаем всех сотрудников из 1С
	ТЗСотрудники1С = ПолучитьСотрудниковИз1С(СигурID);
	ТЗСотрудники1С.Колонки.Добавить("СигурID", Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла()));
	
	
	// 3. Сопоставление сотрудников
	Для Каждого СотрудникSigur Из СотрудникиSigur Цикл
		
		// Поиск соответствия в 1С
		// 3.1. Формируем структуру отбора
		Отбор = Новый Структура;
		Отбор.Вставить("Наименование", СотрудникSigur.name);
		//КритерииОтбора.Вставить("Email", ""); // СотрудникSigur.contactDetails.value
		
		// 3.2. Ищем строки в таблице значений
		НайденныеСтроки = ТЗСотрудники1С.НайтиСтроки(Отбор);
		
		// 3.3. Проверяем количество найденных строк
		Если НайденныеСтроки.Количество() = 1 Тогда
			// 4. Одно соответствие - записываем Sigur ID в регистр сведений
			Сотрудник1С = НайденныеСтроки[0].Ссылка;
			Сообщить("Сотрудник """ + СотрудникSigur.name + """ найден в 1С (Наименование: " + Сотрудник1С.Наименование + ", ID: " + СотрудникSigur.id + "). Запись Sigur ID в регистр сведений.");
			ЗаписатьДополнительныйРеквизит(СотрудникSigur.id,Сотрудник1С,СигурID);
			НайденныеСтроки[0].СигурID = СотрудникSigur.id;
			
			ПодразделениеSigurID = НайденныеСтроки[0].ПодразделениеСигурID; 
			ДолжностьSigurID   = НайденныеСтроки[0].ДолжностьСигурID;
			
			// 2. Формируем структуру с данными сотрудника для изменения
			ДанныеСотрудникаSigur = Новый Структура;
			ДанныеСотрудникаSigur.Вставить("id", СотрудникSigur.id); // Важно передать ID сотрудника, которого нужно изменить
			ДанныеСотрудникаSigur.Вставить("departmentId", ПодразделениеSigurID);
			ДанныеСотрудникаSigur.Вставить("positionId", ДолжностьSigurID);
			
			// 3. Вызываем функцию изменения сотрудника в Sigur
			РезультатИзмененияSigur = ИзменитьСотрудникаSigur(Параметры, ДанныеСотрудникаSigur);
			
			Если РезультатИзмененияSigur.Успех Тогда
				Сообщить("Данные сотрудника """ + СотрудникSigur.name + """ успешно обновлены в Sigur.");
			Иначе
				Сообщить("Ошибка при обновлении данных сотрудника """ + СотрудникSigur.name + """ в Sigur: " + РезультатИзмененияSigur.ОписаниеОшибки);
			КонецЕсли;
			
		ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
			Сообщить("Ошибка: Найдено 0 соответствий для сотрудника """ + СотрудникSigur.name + """ в 1С. Требуется уточнение.");
		Иначе 	
			// 5. Больше одного соответствия - сообщаем об ошибке
			Сообщить("Ошибка: Найдено несколько соответствий для сотрудника """ + СотрудникSigur.name + """ в 1С. Требуется уточнение.");
			// 5.1 Преобразуем найденные строки в массив ссылок на сотрудников
		КонецЕсли;
	КонецЦикла;
	
	
	// 4. Создание сотрудников в Sigur, которых нет (по данным 1С)
	// 4.1. Ищем строки, где SigurID не заполнен
	Отбор = Новый Структура;
	Отбор.Вставить("СигурID", 0);
	
	СотрудникиДляСозданияВSigur = ТЗСотрудники1С.НайтиСтроки(Отбор);
	
	// 4.2. Создаем сотрудников в Sigur
	Для Каждого СтрокаТЗ Из СотрудникиДляСозданияВSigur Цикл
		// 4.3. Формируем данные для создания сотрудника в Sigur
		ДанныеСотрудникаSigur = Новый Структура;
		ДанныеСотрудникаSigur.Вставить("name", СтрокаТЗ.Наименование);
		ДанныеСотрудникаSigur.Вставить("departmentId", СтрокаТЗ.ПодразделениеСигурID);
		ДанныеСотрудникаSigur.Вставить("positionId", СтрокаТЗ.ДолжностьСигурID);
		
		// Другие поля сотрудника (departmentId, positionId и т.д.) - если есть, добавляем
		
		// 4.4. Создаем сотрудника в Sigur
		РезультатДобавленияSigur = ДобавитьСотрудникаSigur(Параметры, ДанныеСотрудникаSigur);
		
		Если РезультатДобавленияSigur.Успех Тогда
			Сообщить("Сотрудник """ + СтрокаТЗ.Наименование + """ успешно создан в Sigur. ID: " + РезультатДобавленияSigur.ОбъектОтвета.id);
			
			// 4.5. Записываем SigurID в регистр сведений для этого сотрудника
			ЗаписатьДополнительныйРеквизит(РезультатДобавленияSigur.ОбъектОтвета.id, СтрокаТЗ.Ссылка, СигурID);
			
		Иначе
			Сообщить("Ошибка при создании сотрудника """ + СтрокаТЗ.Наименование + """ в Sigur: " + РезультатДобавленияSigur.ОписаниеОшибки);
		КонецЕсли;
	КонецЦикла;
	
	
	
	
КонецПроцедуры

// Функция для получения сотрудников из справочника "СотрудникиОрганизаций" и регистра сведений "РаботникиОрганизаций" в таблицу значений
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, по которой необходимо получить сотрудников
//  ПричинаИзмененияСостояния - ПеречислениеСсылка.ПричиныИзмененияСостоянияСотрудника - Причина изменения состояния, которую необходимо исключить из выборки (например, "Увольнение")
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений с колонками "Ссылка", "ПодразделениеОрганизации" и "Должность"
//
Функция ПолучитьСотрудниковИз1С(IDСотрудников) Экспорт
	
	IDДолжностей = ПолучитьСвойсвоПланВидовХарактеристик("СигурID",ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДолжностиОрганизаций);
	IDПодразделений = ПолучитьСвойсвоПланВидовХарактеристик("СигурID",ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций);
	ПричинаУвольнения = Перечисления.ПричиныИзмененияСостояния.Увольнение;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.Наименование,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	РаботникиОрганизацийСрезПоследних.Должность,
	|	ЗначенияСвойствОбъектов1.Значение КАК ПодразделениеСигурID,
	|	ЗначенияСвойствОбъектов2.Значение КАК ДолжностьСигурID
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(, ) КАК РаботникиОрганизацийСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	|			ПО РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = ЗначенияСвойствОбъектов1.Объект
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов2
	|			ПО РаботникиОрганизацийСрезПоследних.Должность = ЗначенияСвойствОбъектов2.Объект
	|		ПО (РаботникиОрганизацийСрезПоследних.Сотрудник = СотрудникиОрганизаций.Ссылка)
	|ГДЕ
	|	СотрудникиОрганизаций.Актуальность = ИСТИНА
	//|	И СотрудникиОрганизаций.Организация = &Организация
	|	И НЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации ЕСТЬ NULL
	|	И РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> &ПричинаИзмененияСостояния
	|	И ЗначенияСвойствОбъектов1.Свойство = &IDПодразделений
	|	И ЗначенияСвойствОбъектов2.Свойство = &IDДолжностей
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникиОрганизаций.Наименование";
	
	//Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПричинаИзмененияСостояния", ПричинаУвольнения);
	Запрос.УстановитьПараметр("IDСотрудников", IDСотрудников);
	Запрос.УстановитьПараметр("IDПодразделений", IDПодразделений);
	Запрос.УстановитьПараметр("IDДолжностей", IDДолжностей);
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаСопоставлениеСобытийСигура ()
	
	Возврат "ВЫБРАТЬ
	|	ТаблицаСобитыйSigur.id КАК id,
	|	ТаблицаСобитыйSigur.type КАК type,
	|	ТаблицаСобитыйSigur.timestamp КАК timestamp,
	|	ТаблицаСобитыйSigur.accessPointId КАК accessPointId,
	|	ТаблицаСобитыйSigur.accessObjectId КАК accessObjectId,
	|	ТаблицаСобитыйSigur.direction КАК direction
	|ПОМЕСТИТЬ ВТ_ТаблицаСобитыйSigur
	|ИЗ
	|	&ТаблицаСобитыйSigur КАК ТаблицаСобитыйSigur
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.Физлицо,
	|	ЗначенияСвойствIDДожности.Значение КАК IDДолжности,
	|	ЗначенияСвойствIDПодразделения.Значение КАК IDПодраздделение,
	|	ЗначенияСвойствIDСотрудника.Значение КАК IDСотрудника,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	РаботникиОрганизацийСрезПоследних.Должность,
	|	СотрудникиОрганизаций.Организация
	|ПОМЕСТИТЬ ВТ_Сотрудники_Подразделения_Должности
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствIDСотрудника
	|		ПО СотрудникиОрганизаций.Ссылка = ЗначенияСвойствIDСотрудника.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних КАК РаботникиОрганизацийСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствIDПодразделения
	|			ПО РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = ЗначенияСвойствIDПодразделения.Объект
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствIDДожности
	|			ПО РаботникиОрганизацийСрезПоследних.Должность = ЗначенияСвойствIDДожности.Объект
	|		ПО (РаботникиОрганизацийСрезПоследних.Сотрудник = СотрудникиОрганизаций.Ссылка)
	|ГДЕ
	|	ЗначенияСвойствIDДожности.Свойство = &IDДолжностей
	|	И ЗначенияСвойствIDПодразделения.Свойство = &IDПодразделений
	|	И ЗначенияСвойствIDСотрудника.Свойство = &IDСотрудников
	|	И СотрудникиОрганизаций.Актуальность = ИСТИНА
	|	И НЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НТ_ТочкиСигура.СигурID,
	|	НТ_ТочкиСигура.Ссылка
	|ПОМЕСТИТЬ Вт_Точки
	|ИЗ
	|	Справочник.НТ_ТочкиСигура КАК НТ_ТочкиСигура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_Сотрудники_Подразделения_Должности.Физлицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Физлицо,
	|	ЕСТЬNULL(ВТ_Сотрудники_Подразделения_Должности.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(ВТ_Сотрудники_Подразделения_Должности.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)) КАК Должность,
	|	ВТ_ТаблицаСобитыйSigur.accessPointId,
	|	ВТ_ТаблицаСобитыйSigur.accessObjectId,
	|	ЕСТЬNULL(Вт_Точки.Ссылка, ЗНАЧЕНИЕ(Справочник.НТ_ТочкиСигура.ПустаяСсылка)) КАК ТочкаДоступа,
	|	ВТ_ТаблицаСобитыйSigur.id,
	|	ВТ_ТаблицаСобитыйSigur.type,
	|	ВТ_ТаблицаСобитыйSigur.timestamp,
	|	ВТ_ТаблицаСобитыйSigur.direction,
	|	ЕСТЬNULL(ВТ_Сотрудники_Подразделения_Должности.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация
	|ИЗ
	|	ВТ_ТаблицаСобитыйSigur КАК ВТ_ТаблицаСобитыйSigur
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_Точки КАК Вт_Точки
	|		ПО ВТ_ТаблицаСобитыйSigur.accessPointId = Вт_Точки.СигурID
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники_Подразделения_Должности КАК ВТ_Сотрудники_Подразделения_Должности
	|		ПО ВТ_ТаблицаСобитыйSigur.accessObjectId = ВТ_Сотрудники_Подразделения_Должности.IDСотрудника";
	
КонецФункции // ()

// Процедура СопоставитьС1с(ПараметрыПодключения, ТЗ) Экспорт
//
//  Назначение:
//      Сопоставляет события из Sigur с данными 1С, создает точки доступа,
//      если они не найдены в справочнике, и записывает информацию о событиях
//      в регистр сведений "НТ_ВходыВыходыФизЛицСКУД".
//
//  Параметры:
//      ПараметрыПодключения - Структура - Параметры подключения к Sigur. Содержит поля:
//                           * "URLСервиса" - Строка - URL адрес сервиса Sigur API.
//                           * "Порт"       - Число  - Порт для подключения к сервису Sigur API.
//                           * "Токен"      - Строка - JWT токен для авторизации.
//      ТЗ - ТаблицаЗначений - Таблица значений с событиями из Sigur, полученная из API.
//                             Ожидается, что таблица содержит колонки, необходимые для
//                             сопоставления с данными 1С и записи в регистр сведений.
//                             Пример колонок: "id", "type", "timestamp", "accessPointId",
//                             "accessObjectId", "direction" и другие.
//
//  Логика работы:
//      1. Получает идентификаторы планов видов характеристик для должностей,
//         подразделений и сотрудников (предполагается использование свойств с SigurID).
//      2. Выполняет запрос к базе данных 1С для сопоставления данных из Sigur с
//         данными 1С (используется функция ТекстЗапросаСопоставлениеСобытийСигура()).
//      3. Заменяет пустые ссылки на физических лиц (если они есть) на заранее
//         определенное значение (Справочники.ФизическиеЛица.АутсорсингМ).
//      4. Заменяет пустую ссылку на точку доступа созданием элемента справочника
//         "НТ_ТочкиСигура" с использованием функции СоздатьТочкуДоступаSigur().
//      5. Записывает информацию о событии в регистр сведений
//         "НТ_ВходыВыходыФизЛицСКУД", преобразуя информацию о событии в JSON
//         и сохраняя ее в ресурсе "СтрокаИзСигура".
//
//  Используемые объекты метаданных:
//      * ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов
//      * Справочник.ДолжностиОрганизаций
//      * Справочник.ПодразделенияОрганизаций
//      * Справочник.СотрудникиОрганизаций
//      * Справочник.ФизическиеЛица
//      * Справочник.НТ_ТочкиСигура
//      * Перечисление.НТ_СобытияВходаВыходаСКУД
//      * РегистрСведений.НТ_ВходыВыходыФизЛицСКУД
//
//  Предположения:
//      * Существует функция ПолучитьСвойсвоПланВидовХарактеристик().
//      * Существует функция ТекстЗапросаСопоставлениеСобытийСигура().
//      * Существует функция СоздатьТочкуДоступаSigur().
//      * Регистр сведений "НТ_ВходыВыходыФизЛицСКУД" имеет измерения "ДатаЗагрузки",
//        "ДатаСобытия", "Организация", "ФизЛицо", "Точка" и ресурс "Событие", а также "СтрокаИзСигура".
Процедура СопоставитьС1с(ПараметрыПодключения,ТЗ)
	
	IDДолжностей = ПолучитьСвойсвоПланВидовХарактеристик("СигурID",ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДолжностиОрганизаций);
	IDПодразделений = ПолучитьСвойсвоПланВидовХарактеристик("СигурID",ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций);
	IDСотрудников = ПолучитьСвойсвоПланВидовХарактеристик("СигурID",ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСопоставлениеСобытийСигура();
	Запрос.УстановитьПараметр("ТаблицаСобитыйSigur",ТЗ);
	Запрос.УстановитьПараметр("IDДолжностей",IDДолжностей);
	Запрос.УстановитьПараметр("IDПодразделений",IDПодразделений);
	Запрос.УстановитьПараметр("IDСотрудников",IDСотрудников);
	Результат = Запрос.Выполнить();
	
	Выгрузка = Результат.Выгрузить();
	
	ФизЛицоПУстаяСсылка = Справочники.ФизическиеЛица.ПустаяСсылка();
	ФизЛицоЗамена = Справочники.ФизическиеЛица.АутсорсингМ;  // Нужна потому что у меня всех сотрудников нет для подмены
	НТ = Справочники.Организации.НайтиПоКоду("НТ0000001");   // Нужна потому что у меня всех сотрудников нет для подмены

	ЗонаСигурПустаяСсылка = Справочники.НТ_ТочкиСигура.ПустаяСсылка();
	Вход  = Перечисления.НТ_СобытияВходаВыходаСКУД.Вход;
	Выход = Перечисления.НТ_СобытияВходаВыходаСКУД.Выход;
	
	ТекДата = ТекущаяДатаСеанса();
	
	Для каждого стр Из Выгрузка Цикл
		
		Если стр.ТочкаДоступа = ЗонаСигурПустаяСсылка Тогда
			
			стр.ТочкаДоступа = СоздатьТочкуДоступаSigur(ПараметрыПодключения,стр.accessPointId);
			
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.НТ_ВходыВыходыФизЛицСКУД.СоздатьМенеджерЗаписи();
		НоваяЗапись.Период =ТекДата; 
		НоваяЗапись.ДатаЗагрузки = ТекДата;
		НоваяЗапись.ДатаСобытия = ПрочитатьДатуJSON(стр.timestamp,ФорматДатыJSON.ISO);
		Если стр.ФизЛицо = ФизЛицоПУстаяСсылка Тогда
		     НоваяЗапись.Организация =  НТ;
			НоваяЗапись.ФизЛицо =ФизЛицоЗамена;
		Иначе 
			НоваяЗапись.Организация =  стр.Организация;
			НоваяЗапись.ФизЛицо = стр.ФизЛицо;	
		КонецЕсли;
		НоваяЗапись.Точка = стр.ТочкаДоступа;
		Если стр.direction = "OUT" Тогда
			НоваяЗапись.Событие = Выход;
		Иначе 
			НоваяЗапись.Событие = Вход;
		КонецЕсли;
		
		
		
		ДанныеДляСтроки = Новый Структура; 
		ДанныеДляСтроки.Вставить("id",стр.id);
		ДанныеДляСтроки.Вставить("type",стр.type);
		ДанныеДляСтроки.Вставить("timestamp",стр.timestamp);
		ДанныеДляСтроки.Вставить("accessPointId",стр.accessPointId);
		ДанныеДляСтроки.Вставить("accessObjectId",стр.accessObjectId);
		ДанныеДляСтроки.Вставить("direction",стр.direction);
		
		НоваяЗапись.СтрокаИзСигура = ОбщегоНазначения.ЗначениеВJSON(ДанныеДляСтроки);
		НоваяЗапись.Записать();
		
		
	КонецЦикла;
	
КонецПроцедуры 

// Функция СоздатьТочкуДоступаSigur(ПараметрыПодключения, IDТочкиДоступа) Экспорт
//
//  Назначение:
//      Создает точку доступа в справочнике 1С на основе данных из Sigur API.
//
//  Параметры:
//      ПараметрыПодключения - Структура - Параметры подключения к Sigur. Содержит поля:
//                           * "URLСервиса" - Строка - URL адрес сервиса Sigur API.
//                           * "Порт"       - Число  - Порт для подключения к сервису Sigur API.
//                           * "Токен"      - Строка - JWT токен для авторизации.
//      IDТочкиДоступа - Число - Идентификатор точки доступа в Sigur.
//
//  Возвращаемое значение:
//      СправочникСсылка.НТ_ТочкиДоступаСигур - Ссылка на созданный или найденный элемент справочника,
//                                      или Неопределено в случае ошибки.
//
//  Порядок действий:
//      1. Проверяет существование точки доступа с указанным ID в справочнике "НТ_ТочкиДоступаСигур".
//      2. Если точка доступа найдена, возвращает ссылку на нее.
//      3. Если точка доступа не найдена:
//         * Получает информацию о точке доступа из Sigur API.  Предполагаем, что есть функция ПолучитьТочкуДоступаПоИдентификаторуSigur.
//         * Если получение данных из Sigur успешно:
//            * Создает новый элемент справочника "НТ_ТочкиДоступаСигур" с наименованием, полученным из Sigur.
//            * Заполняет реквизит "СигурID" (предполагается, что такой реквизит есть) идентификатором точки доступа из Sigur.
//            * Записывает элемент справочника.
//            * Возвращает ссылку на созданный элемент.
//         * Если получение данных из Sigur не удалось, возвращает Неопределено и сообщает об ошибке.
// ---------------------------------------------------------------------------------------
Функция СоздатьТочкуДоступаSigur(ПараметрыПодключения, IDТочкиДоступа) Экспорт
	
	// 1. Объявление переменных
	СправочникТочекДоступа = Справочники.НТ_ТочкиСигура;
	Результат = СправочникТочекДоступа.ПустаяСсылка();  // Изначально считаем, что точка доступа не найдена/не создана
	
	// 2. Поиск точки доступа в справочнике по СигурID
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|    НТ_ТочкиСигура.Ссылка
	|ИЗ
	|    Справочник.НТ_ТочкиСигура КАК НТ_ТочкиСигура
	|ГДЕ
	|    НТ_ТочкиСигура.СигурID = &СигурID";
	Запрос.УстановитьПараметр("СигурID", IDТочкиДоступа); 
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		// Точка доступа найдена - возвращаем ссылку на нее
		Результат = Выборка.Ссылка;
		Сообщить("Точка доступа с ID Сигур " + Строка(IDТочкиДоступа) + " найдена в справочнике: " + Результат);
		Возврат Результат;
	КонецЕсли;
	
	// 3. Точка доступа не найдена - получаем данные из Sigur
	ПараметрыЗапроса = Новый Структура; //  Параметры запроса не нужны, получаем по ID
	РезультатПолучения = ПолучитьТочкуДоступаПоИдентификаторуSigur(ПараметрыПодключения, IDТочкиДоступа, ПараметрыЗапроса); // Предполагаем, что есть такая функция
	
	Если РезультатПолучения.Успех Тогда
		ТочкаДоступаSigur = РезультатПолучения.ОбъектОтвета;
		
		// 4. Создание элемента справочника
		НоваяТочкаДоступа = СправочникТочекДоступа.СоздатьЭлемент();
		НоваяТочкаДоступа.Наименование = ТочкаДоступаSigur.name;
		НоваяТочкаДоступа.СигурID      = Строка(ТочкаДоступаSigur.id); // Записываем ID Sigur в реквизит
		
		// Заполняем другие реквизиты, если необходимо
		// НоваяТочкаДоступа.Тип = ТочкаДоступаSigur.type; // Если в справочнике есть реквизит Тип, заполняем
		// ... (другие поля) ...
		
		Попытка
			НоваяТочкаДоступа.Записать();
			Результат = НоваяТочкаДоступа.Ссылка;
			Сообщить("Точка доступа " + НоваяТочкаДоступа.Наименование + " успешно создана в справочнике, ID Сигур: " + Строка(IDТочкиДоступа));
			
		Исключение
			Сообщить("Ошибка при записи точки доступа в справочник: " + ОписаниеОшибки());
		КонецПопытки;
		
	Иначе
		Сообщить("Ошибка при получении данных о точке доступа из Sigur (ID: " + Строка(IDТочкиДоступа) + "): " + РезультатПолучения.ОписаниеОшибки);
	КонецЕсли;
	
	// 5. Возврат результата
	Возврат Результат;
	
КонецФункции

// Функция возвращает сведения о сотрудниках организации по данными регистров сведений
// "Работники организаций" и "Состояние работников организаций".
Функция ПолучитьТаблицуСотрудниковОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
	|РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер,
	|ВЫБОР
	|	КОГДА РаботникиОрганизации.ПериодЗавершения <= &Период
	|			И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|	ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|КОНЕЦ КАК ПодразделениеОрганизации,
	|ВЫБОР
	|	КОГДА РаботникиОрганизации.ПериодЗавершения <= &Период
	|			И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|	ИНАЧЕ РаботникиОрганизации.Должность
	|КОНЕЦ КАК ДолжностьОрганизации,
	|ВЫБОР
	|	КОГДА ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &Период
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
	|		КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.НеРаботает)
	|	ИНАЧЕ ЕСТЬNULL(ВЫБОР
	|				КОГДА &Период >= СостояниеРаботниковОрганизации.ПериодЗавершения
	|						И СостояниеРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА СостояниеРаботниковОрганизации.СостояниеЗавершения
	|				ИНАЧЕ СостояниеРаботниковОрганизации.Состояние
	|			КОНЕЦ, ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает))
	|КОНЕЦ КАК Состояние,
	|РаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|ВЫБОР
	|	КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|		ТОГДА РаботникиОрганизации.Сотрудник.Физлицо.Наименование
	|	ИНАЧЕ ФИОФизЛиц.Фамилия
	|КОНЕЦ КАК Фамилия,
	|ВЫБОР
	|	КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|		ТОГДА """"
	|	ИНАЧЕ ФИОФизЛиц.Имя
	|КОНЕЦ КАК Имя,
	|ВЫБОР
	|	КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|		ТОГДА """"
	|	ИНАЧЕ ФИОФизЛиц.Отчество
	|КОНЕЦ КАК Отчество
	|ИЗ
	|РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Период, Организация=&Организация) КАК РаботникиОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК СостояниеРаботниковОрганизации
	|	ПО РаботникиОрганизации.Сотрудник = СостояниеРаботниковОрганизации.Сотрудник
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Период, ) КАК ФИОФизЛиц
	|	ПО РаботникиОрганизации.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
	|ГДЕ
	|ВЫБОР
	|	КОГДА ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &Период
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
	|		КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.НеРаботает)
	|	ИНАЧЕ ЕСТЬNULL(ВЫБОР
	|				КОГДА &Период >= СостояниеРаботниковОрганизации.ПериодЗавершения
	|						И СостояниеРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА СостояниеРаботниковОрганизации.СостояниеЗавершения
	|				ИНАЧЕ СостояниеРаботниковОрганизации.Состояние
	|			КОНЕЦ, ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает))
	|КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.НеРаботает)
	|И (РаботникиОрганизации.Сотрудник.ВидЗанятости = Значение(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы) ИЛИ
	|	РаботникиОрганизации.Сотрудник.ВидЗанятости = Значение(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА РаботникиОрганизации.Сотрудник.Физлицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ФИОФизЛиц.Имя
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ФИОФизЛиц.Отчество
	|	КОНЕЦ,
	|	ВЫБОР 
	|		КОГДА РаботникиОрганизации.Сотрудник.ВидЗанятости = Значение(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы) ТОГДА
	|			1
	|		ИНАЧЕ
	|			2
	|	КОНЕЦ
	|";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Организация",Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаСотрудниковОрганизации = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);

	ТаблицаСотрудниковОрганизации.Колонки.Добавить("UID", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
	ТаблицаСотрудниковОрганизации.Колонки.Добавить("ФИО", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(300)));

	Для каждого стр из ТаблицаСотрудниковОрганизации Цикл
		стр.UID = СокрЛП(стр.ФизЛицо.УникальныйИдентификатор());
		стр.ФИО = СокрЛП(стр.Фамилия) + " "+СокрЛП(стр.Имя)+" "+СокрЛП(стр.Отчество);
	КонецЦикла;
	
	Возврат ТаблицаСотрудниковОрганизации;
	
КонецФункции


 // Функция возвращает сведения о сотрудниках по данным справочника "Сотрудники организаций".
// Используется в случае, если сотрудник работает в организации, отличной от той, где установлена СКУД.
Функция ПолучитьТаблицуТекущихСведенийОСотрудниках(Организация) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка 							КАК Сотрудник,
	|	СотрудникиОрганизаций.ФизЛицо 							КАК ФизЛицо,
	|	СотрудникиОрганизаций.ТекущееПодразделениеОрганизации 	КАК ПодразделениеОрганизации,
	|	СотрудникиОрганизаций.ТекущаяДолжностьОрганизации 		КАК ДолжностьОрганизации,
	|	СотрудникиОрганизаций.Код 								КАК ТабельныйНомер,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА СотрудникиОрганизаций.Физлицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия
	|	КОНЕЦ 													КАК Фамилия,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ФИОФизЛиц.Имя
	|	КОНЕЦ 													КАК Имя,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ФИОФизЛиц.Отчество
	|	КОНЕЦ 													КАК Отчество
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Период, ) КАК ФИОФизЛиц
	|	ПО СотрудникиОрганизаций.Физлицо = ФИОФизЛиц.ФизЛицо
	|ГДЕ
	|	СотрудникиОрганизаций.Организация <> &Организация
	|	И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1,1,1) ИЛИ СотрудникиОрганизаций.ДатаУвольнения >= НачалоПериода(&Период,День))
	|	И СотрудникиОрганизаций.ДатаПриемаНаРаботу <= НачалоПериода(&Период,День)
	|	И СотрудникиОрганизаций.ДатаПриемаНаРаботу <> ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ СотрудникиОрганизаций.ПометкаУдаления
	|	И  (СотрудникиОрганизаций.ВидЗанятости = Значение(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы) ИЛИ
	|		СотрудникиОрганизаций.ВидЗанятости = Значение(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА СотрудникиОрганизаций.Физлицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ФИОФизЛиц.Имя
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ФИОФизЛиц.Отчество
	|	КОНЕЦ,
	|	ВЫБОР 
	|		КОГДА СотрудникиОрганизаций.ВидЗанятости = Значение(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы) ТОГДА
	|			1
	|		ИНАЧЕ
	|			2
	|	КОНЕЦ
	|";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаТекущихСведенийОСотрудниках = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);

	ТаблицаТекущихСведенийОСотрудниках.Колонки.Добавить("UID", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
	ТаблицаТекущихСведенийОСотрудниках.Колонки.Добавить("ФИО", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(300)));

	Для каждого стр из ТаблицаТекущихСведенийОСотрудниках Цикл
		стр.UID = СокрЛП(стр.ФизЛицо.УникальныйИдентификатор());
		стр.ФИО = СокрЛП(стр.Фамилия) + " "+СокрЛП(стр.Имя)+" "+СокрЛП(стр.Отчество);
	КонецЦикла;
	
	Возврат ТаблицаТекущихСведенийОСотрудниках;
	
КонецФункции

Процедура ИзменитьВсеЗаписиВНТ_ИсторияВыгрузокВСКУД()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НТ_ИсторияВыгрузокВСКУД.ДатаВыгрузки,
	|	НТ_ИсторияВыгрузокВСКУД.НомерСообщения,
	|	НТ_ИсторияВыгрузокВСКУД.ТипОповещенияДляСКУД,
	|	НТ_ИсторияВыгрузокВСКУД.Объект,
	|	НТ_ИсторияВыгрузокВСКУД.ПодразделениеФизЛица,
	|	НТ_ИсторияВыгрузокВСКУД.ДолжностьФизЛица,
	|	НТ_ИсторияВыгрузокВСКУД.ТабельныйНомерФизЛица,
	|	НТ_ИсторияВыгрузокВСКУД.ДатаРегистрации
	|ИЗ
	|	РегистрСведений.НТ_ИсторияВыгрузокВСКУД КАК НТ_ИсторияВыгрузокВСКУД";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипСКУД = Перечисления.НТ_ТипыСКУД.ТемпоРеале;
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.НТ_ИсторияВыгрузокВСКУД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДатаВыгрузки.Установить(Выборка.ДатаВыгрузки);
		НаборЗаписей.Отбор.НомерСообщения.Установить(Выборка.НомерСообщения);
		НаборЗаписей.Отбор.ТипОповещенияДляСКУД.Установить(Выборка.ТипОповещенияДляСКУД);
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		НаборЗаписей.Прочитать();
		НаборЗаписей[0].ТипСКУД = ТипСКУД;
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
		
	
КонецПроцедуры

Процедура ИзменитьВсеЗаписиВНТ_ВходыВыходыФизЛицСКУД()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НТ_ВходыВыходыФизЛицСКУД.Период,
		|	НТ_ВходыВыходыФизЛицСКУД.Организация,
		|	НТ_ВходыВыходыФизЛицСКУД.ФизЛицо,
		|	НТ_ВходыВыходыФизЛицСКУД.Событие,
		|	НТ_ВходыВыходыФизЛицСКУД.ДатаСобытия
		|ИЗ
		|	РегистрСведений.НТ_ВходыВыходыФизЛицСКУД КАК НТ_ВходыВыходыФизЛицСКУД";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипСКУД = Перечисления.НТ_ТипыСКУД.ТемпоРеале;
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.НТ_ВходыВыходыФизЛицСКУД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.ФизЛицо.Установить(Выборка.ФизЛицо);
		НаборЗаписей.Отбор.Событие.Установить(Выборка.Событие);
		НаборЗаписей.Отбор.ДатаСобытия.Установить(Выборка.ДатаСобытия);
		НаборЗаписей.Прочитать();
		НаборЗаписей[0].ТипСКУД = ТипСКУД;
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
	
КонецПроцедуры


Процедура СоздатьДополнительныеРеквизиты()
	
	СвойствоПодразделение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций;
	СвойствоДолжности =  ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДолжностиОрганизаций;
	СвойствоСотруднику =  ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций;
	
	//Проверяем существуют ли уже такие реквииты
	Если НужноСоздать(СвойствоПодразделение) Тогда
		СоздатьДополнильныйРеквизит(СвойствоПодразделение)
	КонецЕсли;
	
	Если НужноСоздать(СвойствоДолжности) Тогда
		СоздатьДополнильныйРеквизит(СвойствоДолжности)
	КонецЕсли;
	
	Если НужноСоздать(СвойствоСотруднику) Тогда
		СоздатьДополнильныйРеквизит(СвойствоСотруднику)
	КонецЕсли;
	
КонецПроцедуры

Функция НужноСоздать(НазначениеСвойства)
	
	НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвойстваОбъектов.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
		|ГДЕ
		|	СвойстваОбъектов.Наименование = &Наименование
		|	И СвойстваОбъектов.НазначениеСвойства = &НазначениеСвойства";
	
	Запрос.УстановитьПараметр("НазначениеСвойства", НазначениеСвойства);
	Запрос.УстановитьПараметр("Наименование", "СигурID");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	 
Конецфункции 

Процедура СоздатьДополнильныйРеквизит(НазначениеСвойства)
	
	   ДопРеквизитОбъект = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
	   ДопРеквизитОбъект.Наименование = "СигурID";
	   ДопРеквизитОбъект.НазначениеСвойства = НазначениеСвойства;
	   ДопРеквизитОбъект.ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	   ДопРеквизитОбъект.Записать();
	   
КонецПроцедуры

// Возвращает таблицу значений на основании массива структур
//
// Параметры:
// МассивСтруктур - Массив Из Структура - Массив структур, которые будут преобразованы в таблиц значений.
//    Свойства структуры первого элемента массива определяют состав колонок результирующей таблицы.
//
// Возвращаемое значение:
// ТаблицаЗначений - таблица значений, созданная из массива структур.
//
Функция ПреобразоватьМассивВТаблицуЗначений(МассивСтруктур) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	// Создадим колонки по первой структуре массива
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл
			Таблица.Колонки.Добавить(Свойство.Ключ, ОписаниеТиповПоТипу(ТипЗнч(Свойство.Значение)));
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает описание типов по переданному типу
//
// Параметры:
//    Тип - Тип - Тип значения
//
// Возвращаемое значение:
//    ОписаниеТипов - созданное на основании переданного типа описание типов.
//
Функция ОписаниеТиповПоТипу(Тип) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип);
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипов;
	
КонецФункции 

Функция СравнитьДолжностиИзSigurС1С(ТЗSigur,ТЗ1С)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗSigur",ТЗSigur);
	Запрос.УстановитьПараметр("ТЗ1С",ТЗ1С);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СОКРЛП(ВЫРАЗИТЬ(ТЗSigur.name КАК СТРОКА(150))) КАК name,
	|	ТЗSigur.id
	|ПОМЕСТИТЬ ВТ_Sigur
	|ИЗ
	|	&ТЗSigur КАК ТЗSigur
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ1С.Ссылка,
	|	СОКРЛП(ВЫРАЗИТЬ(ТЗ1С.Наименование КАК СТРОКА(150))) КАК Наименование
	|ПОМЕСТИТЬ ВТ_1с
	|ИЗ
	|	&ТЗ1С КАК ТЗ1С
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Sigur.name,
	|	ВТ_Sigur.id
	|ИЗ
	|	ВТ_Sigur КАК ВТ_Sigur
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_1с КАК ВТ_1с
	|		ПО ВТ_Sigur.name = ВТ_1с.Наименование
	|ГДЕ
	|	ВТ_1с.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_1с.Ссылка,
	|	ВТ_1с.Наименование
	|ИЗ
	|	ВТ_1с КАК ВТ_1с
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Sigur КАК ВТ_Sigur
	|		ПО ВТ_1с.Наименование = ВТ_Sigur.name
	|ГДЕ
	|	ВТ_Sigur.id ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Sigur.id,
	|	ВТ_1с.Ссылка
	|ИЗ
	|	ВТ_Sigur КАК ВТ_Sigur
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_1с КАК ВТ_1с
	|		ПО ВТ_Sigur.name = ВТ_1с.Наименование";
	
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("ТЗДолжностиSigur",Пакет[2].Выгрузить());
	Результат.Вставить("ТЗДолжности1С",Пакет[3].Выгрузить());
	Результат.Вставить("ТЗСопоставленные",Пакет[4].Выгрузить());
	Возврат Результат;
	
КонецФункции


Процедура  ОбработкаКодовОшибок (Результат)
	
	Если Результат.КодСтатуса = 400 Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + " (Invalid request)";
	ИначеЕсли Результат.КодСтатуса = 401 Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + " (Unauthorized)";
	ИначеЕсли Результат.КодСтатуса = 403 Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + " (Permission denied)";
	ИначеЕсли Результат.КодСтатуса = 404 Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + " (Access Point with specified id not found)";
	ИначеЕсли Результат.КодСтатуса = 422 Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + " (Validation Error)";
	ИначеЕсли Результат.КодСтатуса = 500 Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + " (Internal Server Error)";
	КонецЕсли;

КонецПроцедуры // ()

Функция ПараметрыОтвета()

	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КодСтатуса", 0);
	Результат.Вставить("ТелоОтвета", "");
	Результат.Вставить("ОбъектОтвета", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");

	Возврат Результат;

КонецФункции // ПараметрыОтвета()


#КонецОбласти
